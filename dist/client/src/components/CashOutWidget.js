import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { DollarSign, TrendingUp, Clock } from "lucide-react";
export default function CashOutWidget({ betId, originalStake, currentValue, potentialWin, isLive }) {
    const [isPartial, setIsPartial] = useState(false);
    const [partialAmount, setPartialAmount] = useState("");
    const profit = currentValue - originalStake;
    const profitPercentage = ((profit / originalStake) * 100).toFixed(1);
    const handleCashOut = () => {
        // Implementation for cash out API call
        console.log("Cash out:", { betId, amount: isPartial ? partialAmount : currentValue });
    };
    return (_jsxs("div", { className: "card-modern p-4 border border-winnex-green/30", children: [_jsxs("div", { className: "flex items-center justify-between mb-4", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(DollarSign, { className: "text-winnex-green", size: 16 }), _jsx("span", { className: "font-bold text-sm", children: "Cash Out Available" }), isLive && (_jsxs("div", { className: "flex items-center space-x-1 text-xs text-red-500", children: [_jsx("div", { className: "w-2 h-2 bg-red-500 rounded-full animate-pulse" }), _jsx("span", { children: "LIVE" })] }))] }), isLive && _jsx(Clock, { className: "text-yellow-400 animate-pulse", size: 14 })] }), _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex justify-between text-sm", children: [_jsx("span", { className: "text-white/60", children: "Original Stake:" }), _jsxs("span", { children: ["$", originalStake.toFixed(2)] })] }), _jsxs("div", { className: "flex justify-between text-sm", children: [_jsx("span", { className: "text-white/60", children: "Current Value:" }), _jsxs("span", { className: "font-bold text-winnex-green", children: ["$", currentValue.toFixed(2)] })] }), _jsxs("div", { className: "flex justify-between text-sm", children: [_jsx("span", { className: "text-white/60", children: "Profit/Loss:" }), _jsxs("span", { className: `font-bold flex items-center ${profit >= 0 ? 'text-winnex-green' : 'text-red-400'}`, children: [_jsx(TrendingUp, { size: 12, className: "mr-1" }), "$", profit.toFixed(2), " (", profitPercentage, "%)"] })] }), _jsxs("div", { className: "border-t border-white/10 pt-3", children: [_jsxs("div", { className: "flex items-center space-x-2 mb-3", children: [_jsx("input", { type: "checkbox", id: "partial", checked: isPartial, onChange: (e) => setIsPartial(e.target.checked), className: "rounded border-white/20" }), _jsx("label", { htmlFor: "partial", className: "text-sm text-white/80", children: "Partial Cash Out" })] }), isPartial && (_jsx("input", { type: "number", placeholder: "Enter amount", value: partialAmount, onChange: (e) => setPartialAmount(e.target.value), max: currentValue, className: "w-full p-2 mb-3 bg-secondary rounded border border-white/10 text-white text-sm" })), _jsxs("button", { onClick: handleCashOut, className: "btn-primary w-full text-sm py-2", disabled: isPartial && (!partialAmount || parseFloat(partialAmount) <= 0), children: ["Cash Out $", isPartial && partialAmount ? partialAmount : currentValue.toFixed(2)] })] })] })] }));
}
