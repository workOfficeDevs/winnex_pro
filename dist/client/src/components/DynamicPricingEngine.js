import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { TrendingUp, TrendingDown, Target, Zap, BarChart3, Settings, DollarSign } from 'lucide-react';
import { apiRequest } from '@/lib/queryClient';
export default function DynamicPricingEngine() {
    const [selectedSport, setSelectedSport] = useState('football');
    const [selectedEvent, setSelectedEvent] = useState('');
    const [autoOptimization, setAutoOptimization] = useState(true);
    const queryClient = useQueryClient();
    const { data: competitorOdds } = useQuery({
        queryKey: ['/api/pricing/competitor-odds', selectedSport],
        queryFn: () => apiRequest(`/api/pricing/competitor-odds?sport=${selectedSport}`),
        refetchInterval: 5000, // Update every 5 seconds
    });
    const { data: marketConditions } = useQuery({
        queryKey: ['/api/pricing/market-conditions'],
        queryFn: () => apiRequest('/api/pricing/market-conditions'),
        refetchInterval: 10000,
    });
    const { data: pricingRules } = useQuery({
        queryKey: ['/api/pricing/rules'],
        queryFn: () => apiRequest('/api/pricing/rules'),
    });
    const { data: yieldOptimization } = useQuery({
        queryKey: ['/api/pricing/yield-optimization', selectedEvent],
        queryFn: () => apiRequest(`/api/pricing/yield-optimization?event=${selectedEvent}`),
        enabled: !!selectedEvent,
    });
    const { data: mlPredictions } = useQuery({
        queryKey: ['/api/pricing/ml-predictions', selectedSport],
        queryFn: () => apiRequest(`/api/pricing/ml-predictions?sport=${selectedSport}`),
        refetchInterval: 30000,
    });
    const updatePricingRuleMutation = useMutation({
        mutationFn: (data) => apiRequest('/api/pricing/update-rule', 'POST', data),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/pricing/rules'] });
        },
    });
    const applyOptimizationMutation = useMutation({
        mutationFn: (data) => apiRequest('/api/pricing/apply-optimization', 'POST', data),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/pricing/yield-optimization'] });
        },
    });
    const enableAutoOptimizationMutation = useMutation({
        mutationFn: (enabled) => apiRequest('/api/pricing/auto-optimization', 'POST', { enabled }),
    });
    const getMarginColor = (margin) => {
        if (margin < 3)
            return 'text-red-400 bg-red-500/20';
        if (margin < 5)
            return 'text-yellow-400 bg-yellow-500/20';
        if (margin < 7)
            return 'text-green-400 bg-green-500/20';
        return 'text-blue-400 bg-blue-500/20';
    };
    const getConditionColor = (condition) => {
        switch (condition) {
            case 'steam_move': return 'bg-red-500/20 text-red-400';
            case 'high_volume': return 'bg-green-500/20 text-green-400';
            case 'low_liquidity': return 'bg-yellow-500/20 text-yellow-400';
            default: return 'bg-blue-500/20 text-blue-400';
        }
    };
    return (_jsx("div", { className: "min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-6", children: _jsxs("div", { className: "max-w-7xl mx-auto", children: [_jsx("div", { className: "mb-8", children: _jsxs("div", { className: "flex justify-between items-center", children: [_jsxs("div", { children: [_jsx("h1", { className: "text-4xl font-bold text-white mb-2", children: "Dynamic Pricing Engine" }), _jsx("p", { className: "text-slate-300", children: "Real-time odds optimization with AI-powered competitor intelligence" })] }), _jsx("div", { className: "flex items-center space-x-3", children: _jsxs(Button, { variant: autoOptimization ? 'default' : 'outline', onClick: () => {
                                        setAutoOptimization(!autoOptimization);
                                        enableAutoOptimizationMutation.mutate(!autoOptimization);
                                    }, className: "flex items-center space-x-2", children: [_jsx(Zap, { className: `h-4 w-4 ${autoOptimization ? 'animate-pulse' : ''}` }), _jsx("span", { children: autoOptimization ? 'Auto-Optimization ON' : 'Manual Mode' })] }) })] }) }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-6 mb-8", children: [_jsx(Card, { className: "bg-black/20 border-green-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-green-400 text-sm font-medium", children: "Yield Increase" }), _jsx("p", { className: "text-3xl font-bold text-white", children: "+18.4%" })] }), _jsx(TrendingUp, { className: "h-8 w-8 text-green-400" })] }) }) }), _jsx(Card, { className: "bg-black/20 border-blue-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-blue-400 text-sm font-medium", children: "Avg Margin" }), _jsx("p", { className: "text-3xl font-bold text-white", children: "5.8%" })] }), _jsx(BarChart3, { className: "h-8 w-8 text-blue-400" })] }) }) }), _jsx(Card, { className: "bg-black/20 border-purple-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-purple-400 text-sm font-medium", children: "ML Accuracy" }), _jsx("p", { className: "text-3xl font-bold text-white", children: "92.1%" })] }), _jsx(Target, { className: "h-8 w-8 text-purple-400" })] }) }) }), _jsx(Card, { className: "bg-black/20 border-yellow-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-yellow-400 text-sm font-medium", children: "Price Updates" }), _jsx("p", { className: "text-3xl font-bold text-white", children: "2,847" })] }), _jsx(Settings, { className: "h-8 w-8 text-yellow-400" })] }) }) })] }), _jsxs(Tabs, { defaultValue: "competitor", className: "space-y-6", children: [_jsxs(TabsList, { className: "bg-black/20 backdrop-blur-xl border-white/10", children: [_jsx(TabsTrigger, { value: "competitor", className: "data-[state=active]:bg-green-500/20", children: "Competitor Intelligence" }), _jsx(TabsTrigger, { value: "conditions", className: "data-[state=active]:bg-green-500/20", children: "Market Conditions" }), _jsx(TabsTrigger, { value: "rules", className: "data-[state=active]:bg-green-500/20", children: "Pricing Rules" }), _jsx(TabsTrigger, { value: "optimization", className: "data-[state=active]:bg-green-500/20", children: "Yield Optimization" }), _jsx(TabsTrigger, { value: "ml", className: "data-[state=active]:bg-green-500/20", children: "ML Predictions" })] }), _jsxs(TabsContent, { value: "competitor", className: "space-y-6", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsxs(Select, { value: selectedSport, onValueChange: setSelectedSport, children: [_jsx(SelectTrigger, { className: "w-48 bg-slate-800/50 border-slate-600", children: _jsx(SelectValue, { placeholder: "Select sport" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "football", children: "Football" }), _jsx(SelectItem, { value: "basketball", children: "Basketball" }), _jsx(SelectItem, { value: "soccer", children: "Soccer" }), _jsx(SelectItem, { value: "tennis", children: "Tennis" })] })] }), _jsxs("div", { className: "flex items-center space-x-2 text-slate-400 text-sm", children: [_jsx("div", { className: "w-2 h-2 bg-green-400 rounded-full animate-pulse" }), _jsx("span", { children: "Live competitor monitoring" })] })] }), _jsx("div", { className: "grid grid-cols-1 gap-4", children: competitorOdds?.map((competitor, index) => (_jsx(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: _jsxs(CardContent, { className: "p-6", children: [_jsxs("div", { className: "flex items-center justify-between mb-4", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("div", { className: "w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center", children: _jsxs("span", { className: "text-white font-bold text-sm", children: ["#", competitor.ranking] }) }), _jsxs("div", { children: [_jsx("h3", { className: "text-white font-bold", children: competitor.bookmaker }), _jsxs("p", { className: "text-slate-400 text-sm", children: ["Market Share: ", competitor.marketShare, "%"] })] })] }), _jsxs("div", { className: "text-right", children: [_jsx("p", { className: "text-2xl font-bold text-white", children: competitor.odds.toFixed(2) }), _jsxs(Badge, { className: getMarginColor(competitor.margin), children: [competitor.margin.toFixed(1), "% margin"] })] })] }), _jsxs("div", { className: "grid grid-cols-3 gap-4", children: [_jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Volume" }), _jsxs("p", { className: "text-white font-bold", children: ["$", competitor.volume.toLocaleString()] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Last Update" }), _jsx("p", { className: "text-white", children: new Date(competitor.lastUpdate).toLocaleTimeString() })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Position" }), _jsxs("div", { className: "flex items-center space-x-1", children: [competitor.ranking <= 3 ? (_jsx(TrendingUp, { className: "h-4 w-4 text-green-400" })) : (_jsx(TrendingDown, { className: "h-4 w-4 text-red-400" })), _jsxs("span", { className: "text-white", children: ["#", competitor.ranking] })] })] })] })] }) }, index))) })] }), _jsx(TabsContent, { value: "conditions", className: "space-y-6", children: _jsx("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: marketConditions?.map((condition, index) => (_jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex justify-between items-center", children: [_jsxs("div", { children: [_jsx(CardTitle, { className: "text-white", children: condition.event }), _jsxs("p", { className: "text-slate-400", children: [condition.sport, " \u2022 ", condition.marketType] })] }), _jsx(Badge, { className: getConditionColor(condition.conditions), children: condition.conditions.replace('_', ' ') })] }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Liquidity" }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsxs("p", { className: "text-white font-bold", children: ["$", condition.liquidity.toLocaleString()] }), _jsx(Progress, { value: (condition.liquidity / 1000000) * 100, className: "h-2 flex-1" })] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Volatility" }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsxs("p", { className: "text-white font-bold", children: [condition.volatility.toFixed(1), "%"] }), _jsx(Progress, { value: condition.volatility, className: "h-2 flex-1" })] })] })] }), _jsxs("div", { className: "grid grid-cols-3 gap-4 pt-4 border-t border-slate-600", children: [_jsxs("div", { className: "text-center", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Public Money" }), _jsxs("p", { className: "text-blue-400 font-bold", children: [condition.publicMoney, "%"] })] }), _jsxs("div", { className: "text-center", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Sharp Money" }), _jsxs("p", { className: "text-green-400 font-bold", children: [condition.sharpMoney, "%"] })] }), _jsxs("div", { className: "text-center", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Steam Moves" }), _jsx("p", { className: "text-red-400 font-bold", children: condition.steamMoves })] })] }), _jsxs("div", { className: "text-center", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Time to Event" }), _jsx("p", { className: "text-white font-bold", children: condition.timeToEvent })] })] })] }, index))) }) }), _jsx(TabsContent, { value: "rules", className: "space-y-6", children: _jsx("div", { className: "space-y-4", children: pricingRules?.map((rule) => (_jsx(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: _jsxs(CardContent, { className: "p-6", children: [_jsxs("div", { className: "flex justify-between items-start mb-4", children: [_jsxs("div", { children: [_jsx("h3", { className: "text-white font-bold text-lg", children: rule.name }), _jsxs("p", { className: "text-slate-400", children: [rule.sport, " \u2022 ", rule.marketType] })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsxs(Badge, { className: `${rule.priority === 1 ? 'bg-red-500/20 text-red-400' :
                                                                    rule.priority <= 3 ? 'bg-yellow-500/20 text-yellow-400' :
                                                                        'bg-green-500/20 text-green-400'}`, children: ["Priority ", rule.priority] }), _jsx(Button, { size: "sm", variant: rule.active ? 'default' : 'outline', onClick: () => updatePricingRuleMutation.mutate({
                                                                    ...rule,
                                                                    active: !rule.active
                                                                }), className: rule.active ? 'bg-green-500/20 text-green-400' : 'border-gray-500/20 text-gray-400', children: rule.active ? 'Active' : 'Inactive' })] })] }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 mb-4", children: [_jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Base Margin" }), _jsxs("p", { className: "text-white font-bold", children: [rule.baseMargin, "%"] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Dynamic Adj." }), _jsxs("p", { className: "text-blue-400 font-bold", children: ["\u00B1", rule.dynamicAdjustment, "%"] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Min Margin" }), _jsxs("p", { className: "text-green-400 font-bold", children: [rule.minMargin, "%"] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Max Margin" }), _jsxs("p", { className: "text-red-400 font-bold", children: [rule.maxMargin, "%"] })] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm mb-2", children: "Triggers" }), _jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-2", children: rule.triggers.map((trigger, index) => (_jsxs("div", { className: "p-2 bg-slate-800/30 rounded text-sm", children: [_jsxs("span", { className: "text-white", children: [trigger.metric, " ", trigger.operator, " ", trigger.value] }), _jsxs("span", { className: "text-green-400 ml-2", children: ["\u2192 ", trigger.adjustment > 0 ? '+' : '', trigger.adjustment, "%"] })] }, index))) })] })] }) }, rule.id))) }) }), _jsxs(TabsContent, { value: "optimization", className: "space-y-6", children: [_jsx("div", { className: "flex justify-between items-center", children: _jsxs(Select, { value: selectedEvent, onValueChange: setSelectedEvent, children: [_jsx(SelectTrigger, { className: "w-64 bg-slate-800/50 border-slate-600", children: _jsx(SelectValue, { placeholder: "Select event for optimization" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "chiefs-bills", children: "Chiefs vs Bills" }), _jsx(SelectItem, { value: "cowboys-eagles", children: "Cowboys vs Eagles" }), _jsx(SelectItem, { value: "lakers-celtics", children: "Lakers vs Celtics" })] })] }) }), yieldOptimization && (_jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsxs(CardTitle, { className: "text-white", children: ["Yield Optimization for ", yieldOptimization.event] }) }), _jsxs(CardContent, { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-3 gap-6", children: [_jsxs("div", { className: "text-center p-4 bg-slate-800/30 rounded-lg", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Current Yield" }), _jsxs("p", { className: "text-2xl font-bold text-white", children: [yieldOptimization.currentYield.toFixed(2), "%"] })] }), _jsxs("div", { className: "text-center p-4 bg-green-500/10 border border-green-500/20 rounded-lg", children: [_jsx("p", { className: "text-green-400 text-sm", children: "Optimized Yield" }), _jsxs("p", { className: "text-2xl font-bold text-green-400", children: [yieldOptimization.optimizedYield.toFixed(2), "%"] })] }), _jsxs("div", { className: "text-center p-4 bg-blue-500/10 border border-blue-500/20 rounded-lg", children: [_jsx("p", { className: "text-blue-400 text-sm", children: "Potential Increase" }), _jsxs("p", { className: "text-2xl font-bold text-blue-400", children: ["+", yieldOptimization.potentialIncrease.toFixed(2), "%"] })] })] }), _jsxs("div", { children: [_jsx("h4", { className: "text-white font-medium mb-3", children: "Recommended Actions" }), _jsx("div", { className: "space-y-2", children: yieldOptimization.recommendedActions.map((action, index) => (_jsxs("div", { className: "flex items-center justify-between p-3 bg-slate-800/30 rounded-lg", children: [_jsxs("div", { children: [_jsx("p", { className: "text-white font-medium", children: action.action }), _jsxs("p", { className: "text-slate-400 text-sm", children: ["Impact: +", action.impact.toFixed(2), "%"] })] }), _jsxs(Badge, { className: `${action.risk === 'low' ? 'bg-green-500/20 text-green-400' :
                                                                            action.risk === 'medium' ? 'bg-yellow-500/20 text-yellow-400' :
                                                                                'bg-red-500/20 text-red-400'}`, children: [action.risk, " risk"] })] }, index))) })] }), _jsxs("div", { children: [_jsx("h4", { className: "text-white font-medium mb-3", children: "Market Segments" }), _jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4", children: yieldOptimization.marketSegments.map((segment, index) => (_jsxs("div", { className: "p-4 bg-slate-800/30 rounded-lg", children: [_jsx("h5", { className: "text-white font-medium mb-2", children: segment.segment }), _jsxs("div", { className: "space-y-2 text-sm", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-slate-400", children: "Elasticity" }), _jsx("span", { className: "text-white", children: segment.elasticity.toFixed(2) })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-slate-400", children: "Optimal Price" }), _jsx("span", { className: "text-green-400", children: segment.optimalPrice.toFixed(2) })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { className: "text-slate-400", children: "Expected Volume" }), _jsx("span", { className: "text-blue-400", children: segment.expectedVolume.toLocaleString() })] })] })] }, index))) })] }), _jsxs(Button, { className: "w-full bg-green-500 hover:bg-green-600", onClick: () => applyOptimizationMutation.mutate({
                                                        event: selectedEvent,
                                                        optimizations: yieldOptimization.recommendedActions
                                                    }), children: [_jsx(DollarSign, { className: "h-4 w-4 mr-2" }), "Apply Optimization"] })] })] }))] }), _jsx(TabsContent, { value: "ml", className: "space-y-6", children: mlPredictions?.map((prediction, index) => (_jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex justify-between items-center", children: [_jsxs(CardTitle, { className: "text-white", children: [prediction.model, " Model"] }), _jsxs(Badge, { className: "bg-blue-500/20 text-blue-400", children: [prediction.accuracy, "% accuracy"] })] }) }), _jsxs(CardContent, { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4", children: [_jsxs("div", { className: "text-center p-3 bg-slate-800/30 rounded-lg", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Optimal Odds" }), _jsx("p", { className: "text-2xl font-bold text-white", children: prediction.prediction.optimalOdds.toFixed(2) })] }), _jsxs("div", { className: "text-center p-3 bg-slate-800/30 rounded-lg", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Confidence" }), _jsxs("p", { className: "text-2xl font-bold text-green-400", children: [prediction.prediction.confidence, "%"] })] }), _jsxs("div", { className: "text-center p-3 bg-slate-800/30 rounded-lg", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Expected Volume" }), _jsx("p", { className: "text-2xl font-bold text-blue-400", children: prediction.prediction.expectedVolume.toLocaleString() })] }), _jsxs("div", { className: "text-center p-3 bg-slate-800/30 rounded-lg", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Profitability" }), _jsxs("p", { className: "text-2xl font-bold text-purple-400", children: [prediction.prediction.profitability.toFixed(1), "%"] })] })] }), _jsxs("div", { children: [_jsx("h4", { className: "text-white font-medium mb-3", children: "Key Factors" }), _jsx("div", { className: "space-y-2", children: prediction.factors.map((factor, factorIndex) => (_jsxs("div", { className: "flex items-center justify-between p-2 bg-slate-800/30 rounded", children: [_jsx("span", { className: "text-white", children: factor.name }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx("div", { className: "w-20 bg-slate-700 rounded-full h-2", children: _jsx("div", { className: "h-2 rounded-full bg-blue-400", style: { width: `${factor.importance}%` } }) }), _jsxs("span", { className: `text-sm ${factor.impact === 'positive' ? 'text-green-400' : 'text-red-400'}`, children: [factor.importance, "%"] })] })] }, factorIndex))) })] }), _jsxs("div", { className: "p-4 bg-green-500/10 border border-green-500/20 rounded-lg", children: [_jsx("h4", { className: "text-green-400 font-medium mb-2", children: "Backtest Results" }), _jsxs("div", { className: "grid grid-cols-3 gap-4 text-sm", children: [_jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Period" }), _jsx("p", { className: "text-white font-bold", children: prediction.backtestResults.period })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Predictions" }), _jsx("p", { className: "text-white font-bold", children: prediction.backtestResults.totalPredictions.toLocaleString() })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Profit Increase" }), _jsxs("p", { className: "text-green-400 font-bold", children: ["+", prediction.backtestResults.profitIncrease.toFixed(1), "%"] })] })] })] })] })] }, index))) })] })] }) }));
}
