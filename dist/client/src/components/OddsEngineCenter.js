import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { TrendingUp, TrendingDown, Activity, Zap, Database, RefreshCw, AlertCircle } from 'lucide-react';
import { apiRequest } from '@/lib/queryClient';
export default function OddsEngineCenter() {
    const [selectedProvider, setSelectedProvider] = useState('');
    const [selectedSport, setSelectedSport] = useState('all');
    const [autoRefresh, setAutoRefresh] = useState(true);
    const queryClient = useQueryClient();
    const { data: oddsProviders } = useQuery({
        queryKey: ['/api/odds/providers'],
        queryFn: () => apiRequest('/api/odds/providers'),
        refetchInterval: autoRefresh ? 5000 : false,
    });
    const { data: liveOdds } = useQuery({
        queryKey: ['/api/odds/live', selectedSport],
        queryFn: () => apiRequest(`/api/odds/live?sport=${selectedSport}`),
        refetchInterval: autoRefresh ? 2000 : false,
    });
    const { data: marginSettings } = useQuery({
        queryKey: ['/api/odds/margin-settings'],
        queryFn: () => apiRequest('/api/odds/margin-settings'),
    });
    const { data: oddsMovements } = useQuery({
        queryKey: ['/api/odds/movements'],
        queryFn: () => apiRequest('/api/odds/movements'),
        refetchInterval: autoRefresh ? 3000 : false,
    });
    const { data: riskAlerts } = useQuery({
        queryKey: ['/api/odds/risk-alerts'],
        queryFn: () => apiRequest('/api/odds/risk-alerts'),
        refetchInterval: autoRefresh ? 5000 : false,
    });
    const updateOddsMutation = useMutation({
        mutationFn: (data) => apiRequest('/api/odds/update', 'POST', data),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/odds/live'] });
            queryClient.invalidateQueries({ queryKey: ['/api/odds/movements'] });
        },
    });
    const updateMarginMutation = useMutation({
        mutationFn: (data) => apiRequest('/api/odds/update-margin', 'POST', data),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/odds/margin-settings'] });
        },
    });
    const suspendMarketMutation = useMutation({
        mutationFn: (data) => apiRequest('/api/odds/suspend-market', 'POST', data),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/odds/live'] });
        },
    });
    const acknowledgeAlertMutation = useMutation({
        mutationFn: (alertId) => apiRequest(`/api/odds/acknowledge-alert/${alertId}`, 'POST'),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/odds/risk-alerts'] });
        },
    });
    const getProviderStatusColor = (status) => {
        switch (status) {
            case 'connected': return 'bg-green-500/20 text-green-400 border-green-500/20';
            case 'error': return 'bg-red-500/20 text-red-400 border-red-500/20';
            case 'maintenance': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/20';
            case 'disconnected': return 'bg-gray-500/20 text-gray-400 border-gray-500/20';
            default: return 'bg-blue-500/20 text-blue-400 border-blue-500/20';
        }
    };
    const getMovementIcon = (movement) => {
        switch (movement) {
            case 'up': return _jsx(TrendingUp, { className: "h-4 w-4 text-green-400" });
            case 'down': return _jsx(TrendingDown, { className: "h-4 w-4 text-red-400" });
            default: return _jsx(Activity, { className: "h-4 w-4 text-gray-400" });
        }
    };
    const connectedProviders = oddsProviders?.filter((p) => p.status === 'connected') || [];
    const criticalAlerts = riskAlerts?.filter((a) => a.severity === 'critical' && a.status === 'active') || [];
    // Auto-refresh counter
    const [refreshCounter, setRefreshCounter] = useState(0);
    useEffect(() => {
        if (autoRefresh) {
            const interval = setInterval(() => {
                setRefreshCounter((prev) => (prev + 1) % 30);
            }, 1000);
            return () => clearInterval(interval);
        }
    }, [autoRefresh]);
    return (_jsx("div", { className: "min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-6", children: _jsxs("div", { className: "max-w-7xl mx-auto", children: [_jsx("div", { className: "mb-8", children: _jsxs("div", { className: "flex justify-between items-center", children: [_jsxs("div", { children: [_jsx("h1", { className: "text-4xl font-bold text-white mb-2", children: "Odds Engine Center" }), _jsx("p", { className: "text-slate-300", children: "Real-time odds management, risk control, and data feed monitoring" })] }), _jsxs("div", { className: "flex items-center space-x-3", children: [_jsxs(Button, { variant: autoRefresh ? 'default' : 'outline', onClick: () => setAutoRefresh(!autoRefresh), className: "flex items-center space-x-2", children: [_jsx(RefreshCw, { className: `h-4 w-4 ${autoRefresh ? 'animate-spin' : ''}` }), _jsx("span", { children: autoRefresh ? 'Auto Refresh' : 'Manual Refresh' })] }), autoRefresh && (_jsxs("div", { className: "text-slate-400 text-sm", children: ["Next update: ", 30 - refreshCounter, "s"] }))] })] }) }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-5 gap-6 mb-8", children: [_jsx(Card, { className: "bg-black/20 border-green-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-green-400 text-sm font-medium", children: "Active Providers" }), _jsx("p", { className: "text-3xl font-bold text-white", children: connectedProviders.length })] }), _jsx(Database, { className: "h-8 w-8 text-green-400" })] }) }) }), _jsx(Card, { className: "bg-black/20 border-blue-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-blue-400 text-sm font-medium", children: "Live Markets" }), _jsx("p", { className: "text-3xl font-bold text-white", children: liveOdds?.length || 0 })] }), _jsx(Activity, { className: "h-8 w-8 text-blue-400" })] }) }) }), _jsx(Card, { className: "bg-black/20 border-yellow-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-yellow-400 text-sm font-medium", children: "Avg Latency" }), _jsxs("p", { className: "text-3xl font-bold text-white", children: [connectedProviders.length > 0
                                                            ? Math.round(connectedProviders.reduce((acc, p) => acc + p.latency, 0) / connectedProviders.length)
                                                            : 0, "ms"] })] }), _jsx(Zap, { className: "h-8 w-8 text-yellow-400" })] }) }) }), _jsx(Card, { className: "bg-black/20 border-red-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-red-400 text-sm font-medium", children: "Risk Alerts" }), _jsx("p", { className: "text-3xl font-bold text-white", children: criticalAlerts.length })] }), _jsx(AlertCircle, { className: "h-8 w-8 text-red-400" })] }) }) }), _jsx(Card, { className: "bg-black/20 border-purple-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-purple-400 text-sm font-medium", children: "Updates/Min" }), _jsx("p", { className: "text-3xl font-bold text-white", children: liveOdds?.reduce((acc, odds) => acc + odds.updateFrequency, 0) || 0 })] }), _jsx(TrendingUp, { className: "h-8 w-8 text-purple-400" })] }) }) })] }), _jsxs(Tabs, { defaultValue: "live-odds", className: "space-y-6", children: [_jsxs(TabsList, { className: "bg-black/20 backdrop-blur-xl border-white/10", children: [_jsx(TabsTrigger, { value: "live-odds", className: "data-[state=active]:bg-green-500/20", children: "Live Odds" }), _jsx(TabsTrigger, { value: "providers", className: "data-[state=active]:bg-green-500/20", children: "Data Providers" }), _jsx(TabsTrigger, { value: "margins", className: "data-[state=active]:bg-green-500/20", children: "Margin Control" }), _jsx(TabsTrigger, { value: "movements", className: "data-[state=active]:bg-green-500/20", children: "Odds Movements" }), _jsx(TabsTrigger, { value: "risk", className: "data-[state=active]:bg-green-500/20", children: "Risk Management" })] }), _jsxs(TabsContent, { value: "live-odds", className: "space-y-6", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsxs(Select, { value: selectedSport, onValueChange: setSelectedSport, children: [_jsx(SelectTrigger, { className: "w-48 bg-slate-800/50 border-slate-600", children: _jsx(SelectValue, { placeholder: "Filter by sport" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "all", children: "All Sports" }), _jsx(SelectItem, { value: "football", children: "Football" }), _jsx(SelectItem, { value: "basketball", children: "Basketball" }), _jsx(SelectItem, { value: "soccer", children: "Soccer" }), _jsx(SelectItem, { value: "tennis", children: "Tennis" })] })] }), _jsxs("div", { className: "flex items-center space-x-2 text-slate-400 text-sm", children: [_jsx("div", { className: "w-2 h-2 bg-green-400 rounded-full animate-pulse" }), _jsx("span", { children: "Live updates active" })] })] }), _jsx("div", { className: "grid grid-cols-1 gap-6", children: liveOdds?.map((odds) => (_jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex justify-between items-center", children: [_jsxs("div", { children: [_jsx(CardTitle, { className: "text-white text-lg", children: odds.match }), _jsxs("p", { className: "text-slate-400", children: [odds.sport, " \u2022 ", odds.market] })] }), _jsxs("div", { className: "flex items-center space-x-3", children: [_jsxs(Badge, { className: "bg-blue-500/20 text-blue-400", children: ["Margin: ", odds.margin.toFixed(1), "%"] }), _jsxs(Badge, { className: `${odds.riskExposure > 80 ? 'bg-red-500/20 text-red-400' :
                                                                        odds.riskExposure > 60 ? 'bg-yellow-500/20 text-yellow-400' :
                                                                            'bg-green-500/20 text-green-400'}`, children: ["Risk: ", odds.riskExposure.toFixed(1), "%"] })] })] }) }), _jsxs(CardContent, { children: [_jsx("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: odds.selections.map((selection, index) => (_jsxs("div", { className: "p-4 bg-slate-800/30 rounded-lg border border-slate-600/30", children: [_jsxs("div", { className: "flex items-center justify-between mb-2", children: [_jsx("span", { className: "text-white font-medium", children: selection.name }), getMovementIcon(selection.movement)] }), _jsxs("div", { className: "flex items-center justify-between mb-2", children: [_jsx("span", { className: "text-3xl font-bold text-green-400", children: selection.odds.toFixed(2) }), _jsxs("div", { className: "text-right", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Volume" }), _jsxs("p", { className: "text-white font-bold", children: ["$", selection.volume.toLocaleString()] })] })] }), _jsxs("div", { className: "flex justify-between items-center text-sm", children: [_jsxs("span", { className: "text-slate-400", children: ["Source: ", selection.source] }), _jsx("span", { className: "text-slate-400", children: new Date(selection.lastChanged).toLocaleTimeString() })] }), _jsxs("div", { className: "mt-3 flex space-x-2", children: [_jsx(Input, { type: "number", step: "0.01", placeholder: "New odds", className: "bg-slate-700/50 border-slate-600 text-white text-sm", onKeyDown: (e) => {
                                                                                if (e.key === 'Enter') {
                                                                                    const newOdds = parseFloat(e.target.value);
                                                                                    if (newOdds > 0) {
                                                                                        updateOddsMutation.mutate({
                                                                                            matchId: odds.matchId,
                                                                                            market: odds.market,
                                                                                            selection: selection.name,
                                                                                            newOdds,
                                                                                            reason: 'Manual adjustment'
                                                                                        });
                                                                                    }
                                                                                }
                                                                            } }), _jsx(Button, { size: "sm", variant: "outline", className: "border-red-500/20 text-red-400 hover:bg-red-500/10", onClick: () => suspendMarketMutation.mutate({
                                                                                matchId: odds.matchId,
                                                                                market: odds.market,
                                                                                reason: 'Manual suspension'
                                                                            }), children: "Suspend" })] })] }, index))) }), _jsxs("div", { className: "mt-4 grid grid-cols-3 gap-4 pt-4 border-t border-slate-600", children: [_jsxs("div", { className: "text-center", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Liquidity" }), _jsxs("p", { className: "text-white font-bold", children: ["$", odds.liquidity.toLocaleString()] })] }), _jsxs("div", { className: "text-center", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Last Updated" }), _jsx("p", { className: "text-white font-bold", children: new Date(odds.lastUpdated).toLocaleTimeString() })] }), _jsxs("div", { className: "text-center", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Update Frequency" }), _jsxs("p", { className: "text-white font-bold", children: [odds.updateFrequency, "/min"] })] })] })] })] }, `${odds.matchId}-${odds.market}`))) })] }), _jsx(TabsContent, { value: "providers", className: "space-y-6", children: _jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6", children: oddsProviders?.map((provider) => (_jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex justify-between items-center", children: [_jsx(CardTitle, { className: "text-white", children: provider.name }), _jsx(Badge, { className: getProviderStatusColor(provider.status), children: provider.status })] }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Latency" }), _jsxs("p", { className: "text-white font-bold", children: [provider.latency, "ms"] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Uptime" }), _jsxs("p", { className: "text-white font-bold", children: [provider.uptime.toFixed(1), "%"] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Accuracy" }), _jsxs("p", { className: "text-white font-bold", children: [provider.accuracy.toFixed(1), "%"] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Coverage" }), _jsxs("p", { className: "text-white font-bold", children: [provider.coverage.toFixed(1), "%"] })] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm mb-2", children: "API Usage" }), _jsxs("div", { className: "space-y-1", children: [_jsxs("div", { className: "flex justify-between text-sm", children: [_jsx("span", { className: "text-slate-300", children: "Calls Today" }), _jsx("span", { className: "text-white", children: provider.apiCalls.toLocaleString() })] }), _jsx(Progress, { value: (provider.apiCalls / provider.rateLimit) * 100, className: "h-2 bg-slate-800" }), _jsxs("div", { className: "flex justify-between text-xs text-slate-400", children: [_jsxs("span", { children: ["Rate Limit: ", provider.rateLimit.toLocaleString()] }), _jsxs("span", { children: ["Cost: $", (provider.apiCalls * provider.costPerCall).toFixed(2)] })] })] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm mb-2", children: "Supported Sports" }), _jsxs("div", { className: "flex flex-wrap gap-1", children: [provider.supportedSports.slice(0, 3).map((sport) => (_jsx(Badge, { variant: "secondary", className: "text-xs", children: sport }, sport))), provider.supportedSports.length > 3 && (_jsxs(Badge, { variant: "secondary", className: "text-xs", children: ["+", provider.supportedSports.length - 3] }))] })] }), _jsxs("div", { className: "flex space-x-2", children: [_jsx(Button, { size: "sm", className: "flex-1 bg-green-500/20 border border-green-500/30 text-green-400 hover:bg-green-500/30", children: "Test Connection" }), _jsx(Button, { size: "sm", variant: "outline", className: "flex-1", children: "Configure" })] })] })] }, provider.id))) }) }), _jsx(TabsContent, { value: "margins", className: "space-y-6", children: _jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-white", children: "Margin Configuration" }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-6", children: marginSettings?.map((setting, index) => (_jsxs("div", { className: "p-4 bg-slate-800/30 rounded-lg border border-slate-600/30", children: [_jsxs("div", { className: "flex justify-between items-center mb-4", children: [_jsxs("div", { children: [_jsxs("h3", { className: "text-white font-medium", children: [setting.sport, " - ", setting.market] }), _jsxs("p", { className: "text-slate-400 text-sm", children: ["Base Margin: ", setting.baseMargin, "% \u2022 Dynamic: ", setting.dynamicAdjustment ? 'On' : 'Off'] })] }), _jsx(Badge, { className: setting.autoSuspend ? 'bg-green-500/20 text-green-400' : 'bg-gray-500/20 text-gray-400', children: setting.autoSuspend ? 'Auto Suspend' : 'Manual Only' })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { className: "text-slate-300", children: "Base Margin (%)" }), _jsx(Input, { type: "number", step: "0.1", defaultValue: setting.baseMargin, className: "bg-slate-700/50 border-slate-600", onChange: (e) => {
                                                                            const newMargin = parseFloat(e.target.value);
                                                                            if (!isNaN(newMargin)) {
                                                                                updateMarginMutation.mutate({
                                                                                    ...setting,
                                                                                    baseMargin: newMargin
                                                                                });
                                                                            }
                                                                        } })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { className: "text-slate-300", children: "Min Margin (%)" }), _jsx(Input, { type: "number", step: "0.1", defaultValue: setting.minMargin, className: "bg-slate-700/50 border-slate-600" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { className: "text-slate-300", children: "Max Margin (%)" }), _jsx(Input, { type: "number", step: "0.1", defaultValue: setting.maxMargin, className: "bg-slate-700/50 border-slate-600" })] })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4 mt-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { className: "text-slate-300", children: "Risk Multiplier" }), _jsx(Input, { type: "number", step: "0.1", defaultValue: setting.riskMultiplier, className: "bg-slate-700/50 border-slate-600" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { className: "text-slate-300", children: "Max Exposure ($)" }), _jsx(Input, { type: "number", defaultValue: setting.maxExposure, className: "bg-slate-700/50 border-slate-600" })] })] })] }, index))) }) })] }) }), _jsx(TabsContent, { value: "movements", className: "space-y-6", children: _jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-white", children: "Recent Odds Movements" }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: oddsMovements?.map((movement, index) => (_jsxs("div", { className: "p-4 bg-slate-800/30 rounded-lg border border-slate-600/30", children: [_jsxs("div", { className: "flex items-center justify-between mb-3", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [getMovementIcon(movement.movement > 0 ? 'up' : movement.movement < 0 ? 'down' : 'stable'), _jsxs("div", { children: [_jsxs("p", { className: "text-white font-medium", children: ["Match ", movement.matchId, " - ", movement.market] }), _jsx("p", { className: "text-slate-400 text-sm", children: movement.selection })] })] }), _jsxs("div", { className: "text-right", children: [_jsxs("p", { className: `text-lg font-bold ${movement.movement > 0 ? 'text-green-400' :
                                                                            movement.movement < 0 ? 'text-red-400' : 'text-gray-400'}`, children: [movement.previousOdds.toFixed(2), " \u2192 ", movement.currentOdds.toFixed(2)] }), _jsxs("p", { className: `text-sm ${movement.movement > 0 ? 'text-green-400' :
                                                                            movement.movement < 0 ? 'text-red-400' : 'text-gray-400'}`, children: [movement.movement > 0 ? '+' : '', (movement.movement * 100).toFixed(1), "%"] })] })] }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 text-sm", children: [_jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Trigger" }), _jsx("p", { className: "text-white capitalize", children: movement.trigger })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Volume" }), _jsxs("p", { className: "text-white", children: ["$", movement.volume.toLocaleString()] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Time" }), _jsx("p", { className: "text-white", children: new Date(movement.timestamp).toLocaleTimeString() })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Reason" }), _jsx("p", { className: "text-white", children: movement.reason })] })] })] }, index))) }) })] }) }), _jsx(TabsContent, { value: "risk", className: "space-y-6", children: _jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-white", children: "Risk Alerts & Monitoring" }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: riskAlerts?.map((alert) => (_jsxs("div", { className: "p-4 bg-slate-800/30 rounded-lg border border-slate-600/30", children: [_jsxs("div", { className: "flex items-center justify-between mb-3", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("div", { className: `w-3 h-3 rounded-full ${alert.severity === 'critical' ? 'bg-red-500' :
                                                                            alert.severity === 'high' ? 'bg-orange-500' :
                                                                                alert.severity === 'medium' ? 'bg-yellow-500' : 'bg-blue-500'}` }), _jsxs("div", { children: [_jsx("p", { className: "text-white font-medium", children: alert.description }), _jsxs("p", { className: "text-slate-400 text-sm", children: ["Match ", alert.matchId, " \u2022 ", alert.market, " \u2022 ", alert.type] })] })] }), _jsxs("div", { className: "text-right", children: [_jsx(Badge, { className: `${alert.severity === 'critical' ? 'bg-red-500/20 text-red-400' :
                                                                            alert.severity === 'high' ? 'bg-orange-500/20 text-orange-400' :
                                                                                alert.severity === 'medium' ? 'bg-yellow-500/20 text-yellow-400' :
                                                                                    'bg-blue-500/20 text-blue-400'}`, children: alert.severity }), _jsx("p", { className: "text-slate-400 text-sm mt-1", children: new Date(alert.createdAt).toLocaleTimeString() })] })] }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-3 gap-4 mb-3 text-sm", children: [_jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Current Value" }), _jsx("p", { className: "text-white font-bold", children: alert.currentValue.toLocaleString() })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Threshold" }), _jsx("p", { className: "text-white font-bold", children: alert.threshold.toLocaleString() })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Recommended Action" }), _jsx("p", { className: "text-white", children: alert.action })] })] }), alert.status === 'active' && (_jsxs("div", { className: "flex space-x-2", children: [_jsx(Button, { size: "sm", className: "bg-green-500/20 border border-green-500/30 text-green-400 hover:bg-green-500/30", onClick: () => acknowledgeAlertMutation.mutate(alert.id), children: "Acknowledge" }), _jsx(Button, { size: "sm", className: "bg-blue-500/20 border border-blue-500/30 text-blue-400 hover:bg-blue-500/30", children: "Take Action" }), _jsx(Button, { size: "sm", className: "bg-red-500/20 border border-red-500/30 text-red-400 hover:bg-red-500/30", children: "Escalate" })] }))] }, alert.id))) }) })] }) })] })] }) }));
}
