import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { CreditCard, Banknote, Smartphone, Globe, Shield, TrendingUp, AlertCircle, CheckCircle } from 'lucide-react';
import { apiRequest } from '@/lib/queryClient';
export default function PaymentGatewayHub() {
    const [selectedProvider, setSelectedProvider] = useState('');
    const [filterStatus, setFilterStatus] = useState('all');
    const queryClient = useQueryClient();
    const { data: paymentStats } = useQuery({
        queryKey: ['/api/payments/stats'],
        queryFn: () => apiRequest('/api/payments/stats'),
    });
    const { data: providers } = useQuery({
        queryKey: ['/api/payments/providers'],
        queryFn: () => apiRequest('/api/payments/providers'),
    });
    const { data: transactions } = useQuery({
        queryKey: ['/api/payments/transactions', filterStatus],
        queryFn: () => apiRequest(`/api/payments/transactions?status=${filterStatus}`),
    });
    const { data: fraudAlerts } = useQuery({
        queryKey: ['/api/payments/fraud-alerts'],
        queryFn: () => apiRequest('/api/payments/fraud-alerts'),
    });
    const toggleProviderMutation = useMutation({
        mutationFn: (data) => apiRequest('/api/payments/toggle-provider', 'POST', data),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/payments/providers'] });
        },
    });
    const processTransactionMutation = useMutation({
        mutationFn: (data) => apiRequest('/api/payments/process-transaction', 'POST', data),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/payments/transactions'] });
        },
    });
    const resolveFraudAlertMutation = useMutation({
        mutationFn: (data) => apiRequest('/api/payments/resolve-fraud', 'POST', data),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/payments/fraud-alerts'] });
        },
    });
    const getStatusColor = (status) => {
        switch (status) {
            case 'active':
            case 'completed': return 'bg-green-500/20 text-green-400 border-green-500/20';
            case 'failed':
            case 'error': return 'bg-red-500/20 text-red-400 border-red-500/20';
            case 'pending':
            case 'processing': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/20';
            case 'maintenance': return 'bg-orange-500/20 text-orange-400 border-orange-500/20';
            default: return 'bg-gray-500/20 text-gray-400 border-gray-500/20';
        }
    };
    const getProviderIcon = (type) => {
        switch (type) {
            case 'card': return _jsx(CreditCard, { className: "h-5 w-5" });
            case 'bank': return _jsx(Banknote, { className: "h-5 w-5" });
            case 'mobile': return _jsx(Smartphone, { className: "h-5 w-5" });
            case 'ewallet': return _jsx(Globe, { className: "h-5 w-5" });
            default: return _jsx(Shield, { className: "h-5 w-5" });
        }
    };
    const activeProviders = providers?.filter((p) => p.status === 'active') || [];
    const criticalAlerts = fraudAlerts?.filter((a) => a.severity === 'critical' && a.status === 'active') || [];
    return (_jsx("div", { className: "min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-6", children: _jsxs("div", { className: "max-w-7xl mx-auto", children: [_jsxs("div", { className: "mb-8", children: [_jsx("h1", { className: "text-4xl font-bold text-white mb-2", children: "Payment Gateway Hub" }), _jsx("p", { className: "text-slate-300", children: "Manage payment providers, monitor transactions, and detect fraud" })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-6 mb-8", children: [_jsx(Card, { className: "bg-black/20 border-green-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-green-400 text-sm font-medium", children: "Total Volume (24h)" }), _jsxs("p", { className: "text-3xl font-bold text-white", children: ["$", paymentStats?.totalVolume?.toLocaleString() || 0] })] }), _jsx(TrendingUp, { className: "h-8 w-8 text-green-400" })] }) }) }), _jsx(Card, { className: "bg-black/20 border-blue-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-blue-400 text-sm font-medium", children: "Success Rate" }), _jsxs("p", { className: "text-3xl font-bold text-white", children: [paymentStats?.successRate?.toFixed(1) || 0, "%"] })] }), _jsx(CheckCircle, { className: "h-8 w-8 text-blue-400" })] }) }) }), _jsx(Card, { className: "bg-black/20 border-yellow-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-yellow-400 text-sm font-medium", children: "Pending Amount" }), _jsxs("p", { className: "text-3xl font-bold text-white", children: ["$", paymentStats?.pendingAmount?.toLocaleString() || 0] })] }), _jsx(AlertCircle, { className: "h-8 w-8 text-yellow-400" })] }) }) }), _jsx(Card, { className: "bg-black/20 border-red-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-red-400 text-sm font-medium", children: "Fraud Alerts" }), _jsx("p", { className: "text-3xl font-bold text-white", children: criticalAlerts.length })] }), _jsx(Shield, { className: "h-8 w-8 text-red-400" })] }) }) })] }), _jsxs(Tabs, { defaultValue: "providers", className: "space-y-6", children: [_jsxs(TabsList, { className: "bg-black/20 backdrop-blur-xl border-white/10", children: [_jsx(TabsTrigger, { value: "providers", className: "data-[state=active]:bg-green-500/20", children: "Payment Providers" }), _jsx(TabsTrigger, { value: "transactions", className: "data-[state=active]:bg-green-500/20", children: "Transaction Monitor" }), _jsx(TabsTrigger, { value: "fraud", className: "data-[state=active]:bg-green-500/20", children: "Fraud Detection" }), _jsx(TabsTrigger, { value: "analytics", className: "data-[state=active]:bg-green-500/20", children: "Payment Analytics" })] }), _jsx(TabsContent, { value: "providers", className: "space-y-6", children: _jsx("div", { className: "grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6", children: providers?.map((provider) => (_jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("div", { className: "p-2 bg-slate-800/50 rounded-lg", children: getProviderIcon(provider.type) }), _jsxs("div", { children: [_jsx(CardTitle, { className: "text-white text-lg", children: provider.name }), _jsxs("p", { className: "text-slate-400 text-sm capitalize", children: [provider.type, " Provider"] })] })] }), _jsx(Badge, { className: getStatusColor(provider.status), children: provider.status })] }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-2 gap-4", children: [_jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Processing Fee" }), _jsxs("p", { className: "text-white font-bold", children: [provider.processingFee, "%"] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Success Rate" }), _jsxs("p", { className: "text-white font-bold", children: [provider.successRate, "%"] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Daily Limit" }), _jsxs("p", { className: "text-white font-bold", children: ["$", provider.dailyLimit?.toLocaleString()] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Uptime" }), _jsxs("p", { className: "text-white font-bold", children: [provider.uptime, "%"] })] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm mb-2", children: "Monthly Volume" }), _jsxs("p", { className: "text-2xl font-bold text-green-400", children: ["$", provider.monthlyVolume?.toLocaleString()] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm mb-2", children: "Supported Currencies" }), _jsxs("div", { className: "flex flex-wrap gap-1", children: [provider.supportedCurrencies?.slice(0, 4).map((currency) => (_jsx(Badge, { variant: "secondary", className: "text-xs", children: currency }, currency))), provider.supportedCurrencies?.length > 4 && (_jsxs(Badge, { variant: "secondary", className: "text-xs", children: ["+", provider.supportedCurrencies.length - 4] }))] })] }), _jsxs("div", { className: "flex space-x-2", children: [_jsx(Button, { size: "sm", variant: provider.status === 'active' ? 'destructive' : 'default', className: "flex-1", onClick: () => toggleProviderMutation.mutate({
                                                                providerId: provider.id,
                                                                status: provider.status === 'active' ? 'inactive' : 'active'
                                                            }), children: provider.status === 'active' ? 'Disable' : 'Enable' }), _jsx(Button, { size: "sm", variant: "outline", className: "flex-1", children: "Configure" })] })] })] }, provider.id))) }) }), _jsxs(TabsContent, { value: "transactions", className: "space-y-6", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("div", { className: "flex space-x-4", children: _jsxs(Select, { value: filterStatus, onValueChange: setFilterStatus, children: [_jsx(SelectTrigger, { className: "w-48 bg-slate-800/50 border-slate-600", children: _jsx(SelectValue, { placeholder: "Filter by status" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "all", children: "All Transactions" }), _jsx(SelectItem, { value: "pending", children: "Pending" }), _jsx(SelectItem, { value: "processing", children: "Processing" }), _jsx(SelectItem, { value: "completed", children: "Completed" }), _jsx(SelectItem, { value: "failed", children: "Failed" })] })] }) }), _jsx(Button, { className: "bg-green-500 hover:bg-green-600", children: "Export Report" })] }), _jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-white", children: "Recent Transactions" }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: transactions?.map((transaction) => (_jsxs("div", { className: "p-4 bg-slate-800/30 rounded-lg border border-slate-600/30", children: [_jsxs("div", { className: "flex items-center justify-between mb-3", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("div", { className: "w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center", children: _jsx("span", { className: "text-white font-bold text-sm", children: transaction.type.charAt(0).toUpperCase() }) }), _jsxs("div", { children: [_jsxs("p", { className: "text-white font-medium", children: [transaction.currency, " ", transaction.amount.toLocaleString()] }), _jsxs("p", { className: "text-slate-400 text-sm", children: [transaction.type, " \u2022 ", transaction.method, " \u2022 ", transaction.provider] })] })] }), _jsxs("div", { className: "text-right", children: [_jsx(Badge, { className: getStatusColor(transaction.status), children: transaction.status }), _jsx("p", { className: "text-slate-400 text-sm mt-1", children: new Date(transaction.createdAt).toLocaleString() })] })] }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 mb-3 text-sm", children: [_jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Reference" }), _jsx("p", { className: "text-white font-mono", children: transaction.reference })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Fees" }), _jsxs("p", { className: "text-white", children: [transaction.currency, " ", transaction.fees] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Net Amount" }), _jsxs("p", { className: "text-white", children: [transaction.currency, " ", transaction.netAmount] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Country" }), _jsx("p", { className: "text-white", children: transaction.country })] })] }), transaction.status === 'failed' && transaction.failureReason && (_jsxs(Alert, { className: "mb-3 bg-red-900/20 border-red-500/20", children: [_jsx(AlertCircle, { className: "h-4 w-4" }), _jsx(AlertDescription, { className: "text-red-300", children: transaction.failureReason })] })), transaction.status === 'pending' && (_jsxs("div", { className: "flex space-x-2", children: [_jsx(Button, { size: "sm", className: "bg-green-500/20 border border-green-500/30 text-green-400 hover:bg-green-500/30", onClick: () => processTransactionMutation.mutate({
                                                                        transactionId: transaction.id,
                                                                        action: 'approve'
                                                                    }), children: "Approve" }), _jsx(Button, { size: "sm", className: "bg-red-500/20 border border-red-500/30 text-red-400 hover:bg-red-500/30", onClick: () => processTransactionMutation.mutate({
                                                                        transactionId: transaction.id,
                                                                        action: 'reject'
                                                                    }), children: "Reject" }), _jsx(Button, { size: "sm", className: "bg-blue-500/20 border border-blue-500/30 text-blue-400 hover:bg-blue-500/30", children: "Investigate" })] }))] }, transaction.id))) }) })] })] }), _jsx(TabsContent, { value: "fraud", className: "space-y-6", children: _jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-white", children: "Fraud Detection Alerts" }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: fraudAlerts?.map((alert) => (_jsxs("div", { className: "p-4 bg-slate-800/30 rounded-lg border border-slate-600/30", children: [_jsxs("div", { className: "flex items-center justify-between mb-3", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("div", { className: `w-3 h-3 rounded-full ${alert.severity === 'critical' ? 'bg-red-500' :
                                                                            alert.severity === 'high' ? 'bg-orange-500' :
                                                                                alert.severity === 'medium' ? 'bg-yellow-500' : 'bg-blue-500'}` }), _jsxs("div", { children: [_jsx("p", { className: "text-white font-medium", children: alert.description }), _jsxs("p", { className: "text-slate-400 text-sm", children: ["User: ", alert.userId, " \u2022 Transaction: ", alert.transactionId] })] })] }), _jsxs("div", { className: "text-right", children: [_jsx(Badge, { className: `${alert.severity === 'critical' ? 'bg-red-500/20 text-red-400' :
                                                                            alert.severity === 'high' ? 'bg-orange-500/20 text-orange-400' :
                                                                                alert.severity === 'medium' ? 'bg-yellow-500/20 text-yellow-400' :
                                                                                    'bg-blue-500/20 text-blue-400'}`, children: alert.severity }), _jsxs("p", { className: "text-slate-400 text-sm mt-1", children: ["Risk Score: ", alert.riskScore] })] })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsx("p", { className: "text-slate-400 text-sm", children: new Date(alert.createdAt).toLocaleString() }), alert.status === 'active' && (_jsxs("div", { className: "flex space-x-2", children: [_jsx(Button, { size: "sm", className: "bg-green-500/20 border border-green-500/30 text-green-400 hover:bg-green-500/30", onClick: () => resolveFraudAlertMutation.mutate({
                                                                            alertId: alert.id,
                                                                            resolution: 'false_positive'
                                                                        }), children: "False Positive" }), _jsx(Button, { size: "sm", className: "bg-red-500/20 border border-red-500/30 text-red-400 hover:bg-red-500/30", onClick: () => resolveFraudAlertMutation.mutate({
                                                                            alertId: alert.id,
                                                                            resolution: 'confirmed_fraud'
                                                                        }), children: "Confirm Fraud" })] }))] })] }, alert.id))) }) })] }) }), _jsxs(TabsContent, { value: "analytics", className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-white", children: "Payment Method Distribution" }) }), _jsx(CardContent, { className: "space-y-4", children: paymentStats?.volumeByMethod?.map((method, index) => (_jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between text-sm", children: [_jsx("span", { className: "text-slate-300 capitalize", children: method.method }), _jsxs("span", { className: "text-white", children: ["$", method.volume.toLocaleString()] })] }), _jsx(Progress, { value: method.percentage, className: "h-2 bg-slate-800" }), _jsx("div", { className: "flex justify-between text-xs text-slate-400", children: _jsxs("span", { children: [method.percentage.toFixed(1), "% of total volume"] }) })] }, index))) })] }), _jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-white", children: "Top Performing Providers" }) }), _jsx(CardContent, { className: "space-y-4", children: paymentStats?.topProviders?.map((provider, index) => (_jsxs("div", { className: "flex items-center justify-between p-3 bg-slate-800/30 rounded-lg", children: [_jsxs("div", { children: [_jsx("p", { className: "text-white font-medium", children: provider.name }), _jsxs("p", { className: "text-slate-400 text-sm", children: [provider.transactions, " transactions"] })] }), _jsxs("div", { className: "text-right", children: [_jsxs("p", { className: "text-white font-bold", children: ["$", provider.volume.toLocaleString()] }), _jsxs("p", { className: "text-green-400 text-sm", children: [provider.successRate, "% success"] })] })] }, index))) })] })] }), _jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-white", children: "Payment Performance Metrics" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-6", children: [_jsxs("div", { className: "text-center", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Average Processing Time" }), _jsxs("p", { className: "text-2xl font-bold text-white", children: [paymentStats?.averageProcessingTime || 0, "s"] })] }), _jsxs("div", { className: "text-center", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Chargeback Rate" }), _jsxs("p", { className: "text-2xl font-bold text-orange-400", children: [paymentStats?.chargebackRate || 0, "%"] })] }), _jsxs("div", { className: "text-center", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Total Fees" }), _jsxs("p", { className: "text-2xl font-bold text-blue-400", children: ["$", paymentStats?.totalFees?.toLocaleString() || 0] })] }), _jsxs("div", { className: "text-center", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Failed Transactions" }), _jsx("p", { className: "text-2xl font-bold text-red-400", children: paymentStats?.failedTransactions || 0 })] })] }) })] })] })] })] }) }));
}
