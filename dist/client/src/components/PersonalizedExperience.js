import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Settings, Palette, Globe, Target, Clock, Star, TrendingUp } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
const THEMES = [
    { name: 'Dark Pro', value: 'dark', colors: ['#0a0f1c', '#1a2332', '#00ff9d'] },
    { name: 'Light Mode', value: 'light', colors: ['#ffffff', '#f8fafc', '#059669'] },
    { name: 'Ocean Blue', value: 'ocean', colors: ['#0c1e3d', '#1e40af', '#3b82f6'] },
    { name: 'Neon Green', value: 'neon', colors: ['#0d1117', '#161b22', '#39ff14'] },
];
const CURRENCIES = [
    { code: 'USD', name: 'US Dollar', symbol: '$' },
    { code: 'EUR', name: 'Euro', symbol: '€' },
    { code: 'GBP', name: 'British Pound', symbol: '£' },
    { code: 'CAD', name: 'Canadian Dollar', symbol: 'C$' },
    { code: 'AUD', name: 'Australian Dollar', symbol: 'A$' },
    { code: 'JPY', name: 'Japanese Yen', symbol: '¥' },
    { code: 'BTC', name: 'Bitcoin', symbol: '₿' },
    { code: 'ETH', name: 'Ethereum', symbol: 'Ξ' },
];
export default function PersonalizedExperience() {
    const [activeTab, setActiveTab] = useState('preferences');
    const { toast } = useToast();
    const queryClient = useQueryClient();
    const { data: preferences } = useQuery({
        queryKey: ["/api/user/preferences"],
    });
    const { data: personalizationData } = useQuery({
        queryKey: ["/api/user/personalization"],
    });
    const updatePreferences = useMutation({
        mutationFn: async (data) => {
            return apiRequest("/api/user/preferences", "PUT", data);
        },
        onSuccess: () => {
            toast({
                title: "Preferences Updated",
                description: "Your personalization settings have been saved",
            });
            queryClient.invalidateQueries({ queryKey: ["/api/user/preferences"] });
        },
    });
    const handlePreferenceChange = (key, value) => {
        updatePreferences.mutate({ [key]: value });
    };
    return (_jsxs("div", { className: "space-y-6", children: [_jsx("div", { className: "card-modern p-6 gradient-accent", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx(Settings, { className: "text-white", size: 32 }), _jsxs("div", { children: [_jsx("h2", { className: "text-2xl font-bold text-white", children: "Personalized Experience" }), _jsx("p", { className: "text-white/80", children: "Customize Winnex to match your betting style and preferences" })] })] }), _jsx("div", { className: "glass rounded-2xl p-4", children: _jsxs("div", { className: "text-center", children: [_jsx("div", { className: "text-2xl font-bold text-white", children: "98%" }), _jsx("div", { className: "text-white/70 text-sm", children: "Customized" })] }) })] }) }), _jsx("div", { className: "glass rounded-xl p-1 flex", children: ['preferences', 'patterns', 'recommendations'].map((tab) => (_jsx("button", { onClick: () => setActiveTab(tab), className: `flex-1 py-3 px-4 rounded-lg font-medium transition-all capitalize ${activeTab === tab ? 'bg-winnex-green text-black' : 'text-white/70 hover:text-white'}`, children: tab }, tab))) }), activeTab === 'preferences' && (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "card-modern p-6", children: [_jsxs("h3", { className: "text-xl font-bold mb-4 flex items-center", children: [_jsx(Palette, { className: "mr-2 text-winnex-purple" }), "Theme & Appearance"] }), _jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4", children: THEMES.map((theme) => (_jsxs("button", { onClick: () => handlePreferenceChange('theme', theme.value), className: `p-4 rounded-lg border-2 transition-all ${preferences?.theme === theme.value
                                        ? 'border-winnex-green'
                                        : 'border-white/10 hover:border-white/20'}`, children: [_jsx("div", { className: "flex space-x-1 mb-3", children: theme.colors.map((color, index) => (_jsx("div", { className: "w-6 h-6 rounded-full", style: { backgroundColor: color } }, index))) }), _jsx("div", { className: "font-medium text-sm", children: theme.name })] }, theme.value))) })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "card-modern p-6", children: [_jsxs("h3", { className: "text-lg font-bold mb-4 flex items-center", children: [_jsx(Globe, { className: "mr-2 text-winnex-blue" }), "Regional Settings"] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium mb-2", children: "Currency" }), _jsx("select", { value: preferences?.currency || 'USD', onChange: (e) => handlePreferenceChange('currency', e.target.value), className: "w-full p-3 bg-secondary rounded-lg border border-white/10 text-white", children: CURRENCIES.map((currency) => (_jsxs("option", { value: currency.code, children: [currency.symbol, " ", currency.name] }, currency.code))) })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium mb-2", children: "Odds Format" }), _jsxs("select", { value: preferences?.oddsFormat || 'decimal', onChange: (e) => handlePreferenceChange('oddsFormat', e.target.value), className: "w-full p-3 bg-secondary rounded-lg border border-white/10 text-white", children: [_jsx("option", { value: "decimal", children: "Decimal (2.50)" }), _jsx("option", { value: "fractional", children: "Fractional (3/2)" }), _jsx("option", { value: "american", children: "American (+150)" })] })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium mb-2", children: "Language" }), _jsxs("select", { value: preferences?.language || 'en', onChange: (e) => handlePreferenceChange('language', e.target.value), className: "w-full p-3 bg-secondary rounded-lg border border-white/10 text-white", children: [_jsx("option", { value: "en", children: "English" }), _jsx("option", { value: "es", children: "Espa\u00F1ol" }), _jsx("option", { value: "fr", children: "Fran\u00E7ais" }), _jsx("option", { value: "de", children: "Deutsch" }), _jsx("option", { value: "it", children: "Italiano" }), _jsx("option", { value: "pt", children: "Portugu\u00EAs" })] })] })] })] }), _jsxs("div", { className: "card-modern p-6", children: [_jsxs("h3", { className: "text-lg font-bold mb-4 flex items-center", children: [_jsx(Target, { className: "mr-2 text-winnex-orange" }), "Betting Preferences"] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium mb-2", children: "Default Stake" }), _jsx("input", { type: "number", value: preferences?.defaultStake || 10, onChange: (e) => handlePreferenceChange('defaultStake', parseFloat(e.target.value)), className: "w-full p-3 bg-secondary rounded-lg border border-white/10 text-white" })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium mb-2", children: "Dashboard Layout" }), _jsxs("select", { value: preferences?.dashboardLayout || 'detailed', onChange: (e) => handlePreferenceChange('dashboardLayout', e.target.value), className: "w-full p-3 bg-secondary rounded-lg border border-white/10 text-white", children: [_jsx("option", { value: "minimal", children: "Minimal" }), _jsx("option", { value: "compact", children: "Compact" }), _jsx("option", { value: "detailed", children: "Detailed" })] })] }), _jsxs("div", { className: "space-y-3", children: [_jsxs("label", { className: "flex items-center space-x-3", children: [_jsx("input", { type: "checkbox", checked: preferences?.autoOddsRefresh || false, onChange: (e) => handlePreferenceChange('autoOddsRefresh', e.target.checked), className: "rounded" }), _jsx("span", { children: "Auto-refresh odds" })] }), _jsxs("label", { className: "flex items-center space-x-3", children: [_jsx("input", { type: "checkbox", checked: preferences?.soundNotifications || false, onChange: (e) => handlePreferenceChange('soundNotifications', e.target.checked), className: "rounded" }), _jsx("span", { children: "Sound notifications" })] }), _jsxs("label", { className: "flex items-center space-x-3", children: [_jsx("input", { type: "checkbox", checked: preferences?.pushNotifications || true, onChange: (e) => handlePreferenceChange('pushNotifications', e.target.checked), className: "rounded" }), _jsx("span", { children: "Push notifications" })] })] })] })] })] })] })), activeTab === 'patterns' && personalizationData && (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "card-modern p-6", children: [_jsx("h3", { className: "text-xl font-bold mb-4", children: "Your Favorite Sports" }), _jsx("div", { className: "space-y-3", children: personalizationData.bettingPatterns.favoriteSports.map((sport, index) => (_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "font-medium", children: sport.sport }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx("div", { className: "w-24 h-2 bg-white/10 rounded-full", children: _jsx("div", { className: "h-2 bg-winnex-green rounded-full", style: { width: `${sport.percentage}%` } }) }), _jsxs("span", { className: "text-sm text-winnex-green", children: [sport.percentage, "%"] })] })] }, index))) })] }), _jsxs("div", { className: "card-modern p-6", children: [_jsx("h3", { className: "text-xl font-bold mb-4", children: "Best Performing Markets" }), _jsx("div", { className: "space-y-3", children: personalizationData.bettingPatterns.bestPerformingMarkets.map((market, index) => (_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "font-medium", children: market.market }), _jsxs("span", { className: "text-winnex-green font-bold", children: [market.winRate, "% win rate"] })] }, index))) })] })] }), _jsxs("div", { className: "card-modern p-6", children: [_jsx("h3", { className: "text-xl font-bold mb-4", children: "Peak Betting Activity" }), _jsx("div", { className: "grid grid-cols-6 md:grid-cols-12 gap-2", children: Array.from({ length: 24 }, (_, hour) => {
                                    const activity = personalizationData.bettingPatterns.peakBettingHours.find(h => h.hour === hour)?.activity || 0;
                                    return (_jsxs("div", { className: "text-center", children: [_jsx("div", { className: "w-full bg-winnex-green rounded mb-1", style: { height: `${Math.max(activity * 2, 4)}px` } }), _jsxs("div", { className: "text-xs text-white/60", children: [hour, "h"] })] }, hour));
                                }) }), _jsxs("div", { className: "text-sm text-white/60 mt-2", children: ["Most active: ", personalizationData.bettingPatterns.peakBettingHours
                                        .sort((a, b) => b.activity - a.activity)[0]?.hour, ":00"] })] })] })), activeTab === 'recommendations' && personalizationData && (_jsx("div", { className: "space-y-6", children: _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6", children: [_jsxs("div", { className: "card-modern p-6", children: [_jsxs("h3", { className: "text-lg font-bold mb-4 flex items-center", children: [_jsx(Star, { className: "mr-2 text-winnex-orange" }), "Suggested Leagues"] }), _jsx("div", { className: "space-y-2", children: personalizationData.recommendations.suggestedLeagues.map((league, index) => (_jsxs("div", { className: "glass rounded-lg p-3 flex justify-between items-center", children: [_jsx("span", { className: "font-medium", children: league }), _jsx("button", { className: "btn-secondary text-xs", children: "Follow" })] }, index))) })] }), _jsxs("div", { className: "card-modern p-6", children: [_jsxs("h3", { className: "text-lg font-bold mb-4 flex items-center", children: [_jsx(TrendingUp, { className: "mr-2 text-winnex-green" }), "Optimal Settings"] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx("div", { className: "text-sm text-white/60", children: "Recommended Stake" }), _jsxs("div", { className: "text-lg font-bold text-winnex-green", children: ["$", personalizationData.recommendations.recommendedStakes] })] }), _jsxs("div", { children: [_jsx("div", { className: "text-sm text-white/60", children: "Best Betting Times" }), _jsx("div", { className: "flex flex-wrap gap-1 mt-1", children: personalizationData.recommendations.optimalBettingTimes.map((time, index) => (_jsx("span", { className: "text-xs bg-winnex-blue/20 text-winnex-blue px-2 py-1 rounded", children: time }, index))) })] })] })] }), _jsxs("div", { className: "card-modern p-6", children: [_jsxs("h3", { className: "text-lg font-bold mb-4 flex items-center", children: [_jsx(Clock, { className: "mr-2 text-winnex-blue" }), "Personal Offers"] }), _jsx("div", { className: "space-y-3", children: personalizationData.recommendations.personalizedOffers.map((offer, index) => (_jsxs("div", { className: "glass rounded-lg p-3", children: [_jsx("div", { className: "font-medium text-sm", children: offer.title }), _jsx("div", { className: "text-xs text-white/60 mb-2", children: offer.description }), _jsx("div", { className: "text-lg font-bold text-winnex-orange", children: offer.value })] }, index))) })] })] }) }))] }));
}
