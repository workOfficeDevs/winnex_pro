import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Shield, AlertTriangle, Clock, DollarSign, PauseCircle, Eye, BarChart3, Heart } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
export default function ResponsibleGamingTools() {
    const [activeTab, setActiveTab] = useState('dashboard');
    const [showRealityCheck, setShowRealityCheck] = useState(false);
    const [sessionStartTime] = useState(Date.now());
    const { toast } = useToast();
    const queryClient = useQueryClient();
    const { data: settings } = useQuery({
        queryKey: ["/api/responsible-gaming/settings"],
    });
    const { data: behaviorData } = useQuery({
        queryKey: ["/api/responsible-gaming/behavior"],
        refetchInterval: 60000, // Update every minute
    });
    const { data: supportResources = [] } = useQuery({
        queryKey: ["/api/responsible-gaming/support"],
    });
    const updateSettings = useMutation({
        mutationFn: async (data) => {
            return apiRequest("/api/responsible-gaming/settings", "PUT", data);
        },
        onSuccess: () => {
            toast({
                title: "Settings Updated",
                description: "Your responsible gaming limits have been updated",
            });
            queryClient.invalidateQueries({ queryKey: ["/api/responsible-gaming/settings"] });
        },
    });
    const takeCooloff = useMutation({
        mutationFn: async (hours) => {
            return apiRequest("/api/responsible-gaming/cooloff", "POST", { hours });
        },
        onSuccess: () => {
            toast({
                title: "Cool-off Period Activated",
                description: "Your account has been temporarily restricted",
            });
        },
    });
    const selfExclude = useMutation({
        mutationFn: async (days) => {
            return apiRequest("/api/responsible-gaming/self-exclude", "POST", { days });
        },
        onSuccess: () => {
            toast({
                title: "Self-Exclusion Activated",
                description: "Your account will be suspended for the selected period",
            });
        },
    });
    // Reality check timer
    useEffect(() => {
        if (settings?.realityCheckInterval) {
            const interval = setInterval(() => {
                setShowRealityCheck(true);
            }, settings.realityCheckInterval * 60000);
            return () => clearInterval(interval);
        }
    }, [settings?.realityCheckInterval]);
    const currentSessionTime = Math.floor((Date.now() - sessionStartTime) / 60000);
    const getRiskColor = (score) => {
        if (score >= 70)
            return 'text-red-400';
        if (score >= 40)
            return 'text-winnex-orange';
        return 'text-winnex-green';
    };
    const getSeverityColor = (severity) => {
        switch (severity) {
            case 'high': return 'bg-red-500/20 border-red-500/30 text-red-400';
            case 'medium': return 'bg-winnex-orange/20 border-winnex-orange/30 text-winnex-orange';
            case 'low': return 'bg-winnex-green/20 border-winnex-green/30 text-winnex-green';
            default: return 'bg-white/10 border-white/20 text-white';
        }
    };
    return (_jsxs("div", { className: "space-y-6", children: [showRealityCheck && (_jsx("div", { className: "fixed inset-0 bg-black/80 flex items-center justify-center z-50", children: _jsx("div", { className: "card-modern p-8 max-w-md mx-4", children: _jsxs("div", { className: "text-center", children: [_jsx(Clock, { className: "mx-auto mb-4 text-winnex-orange", size: 48 }), _jsx("h3", { className: "text-2xl font-bold mb-4", children: "Reality Check" }), _jsxs("p", { className: "text-white/80 mb-2", children: ["You've been playing for ", currentSessionTime, " minutes"] }), _jsxs("p", { className: "text-sm text-white/60 mb-6", children: ["Today's spending: $", behaviorData?.depositsToday || 0] }), _jsxs("div", { className: "flex space-x-3", children: [_jsx("button", { onClick: () => setShowRealityCheck(false), className: "btn-secondary flex-1", children: "Continue Playing" }), _jsx("button", { onClick: () => {
                                            setShowRealityCheck(false);
                                            takeCooloff.mutate(1);
                                        }, className: "btn-primary flex-1", children: "Take a Break" })] })] }) }) })), _jsx("div", { className: "card-modern p-6 bg-gradient-to-r from-green-900/50 to-blue-900/50 border border-green-500/20", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx(Shield, { className: "text-winnex-green", size: 32 }), _jsxs("div", { children: [_jsx("h2", { className: "text-2xl font-bold text-white", children: "Responsible Gaming" }), _jsx("p", { className: "text-white/80", children: "Stay in control of your betting with our safety tools" })] })] }), _jsxs("div", { className: "text-right", children: [_jsxs("div", { className: `text-2xl font-bold ${getRiskColor(behaviorData?.riskScore || 0)}`, children: [behaviorData?.riskScore || 0, "/100"] }), _jsx("div", { className: "text-white/70 text-sm", children: "Risk Score" })] })] }) }), _jsx("div", { className: "glass rounded-xl p-1 flex", children: ['dashboard', 'limits', 'tools', 'support'].map((tab) => (_jsx("button", { onClick: () => setActiveTab(tab), className: `flex-1 py-3 px-4 rounded-lg font-medium transition-all capitalize ${activeTab === tab ? 'bg-winnex-green text-black' : 'text-white/70 hover:text-white'}`, children: tab }, tab))) }), activeTab === 'dashboard' && behaviorData && (_jsxs("div", { className: "space-y-6", children: [behaviorData.behaviorAlerts.length > 0 && (_jsx("div", { className: "space-y-3", children: behaviorData.behaviorAlerts.map((alert, index) => (_jsxs("div", { className: `p-4 rounded-lg border ${getSeverityColor(alert.severity)}`, children: [_jsxs("div", { className: "flex items-center space-x-2 mb-2", children: [_jsx(AlertTriangle, { size: 16 }), _jsxs("span", { className: "font-medium capitalize", children: [alert.severity, " Risk Alert"] })] }), _jsx("p", { className: "text-sm", children: alert.message }), _jsx("div", { className: "text-xs opacity-70 mt-1", children: new Date(alert.timestamp).toLocaleString() })] }, index))) })), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-6", children: [_jsxs("div", { className: "card-modern p-6 text-center", children: [_jsx(Clock, { className: "mx-auto mb-2 text-winnex-blue", size: 24 }), _jsxs("div", { className: "text-2xl font-bold", children: [currentSessionTime, "m"] }), _jsx("div", { className: "text-white/60 text-sm", children: "Session Time" })] }), _jsxs("div", { className: "card-modern p-6 text-center", children: [_jsx(DollarSign, { className: "mx-auto mb-2 text-winnex-green", size: 24 }), _jsxs("div", { className: "text-2xl font-bold", children: ["$", behaviorData.depositsToday] }), _jsx("div", { className: "text-white/60 text-sm", children: "Today's Deposits" })] }), _jsxs("div", { className: "card-modern p-6 text-center", children: [_jsx(BarChart3, { className: "mx-auto mb-2 text-winnex-orange", size: 24 }), _jsx("div", { className: "text-2xl font-bold", children: behaviorData.betsToday }), _jsx("div", { className: "text-white/60 text-sm", children: "Bets Today" })] }), _jsxs("div", { className: "card-modern p-6 text-center", children: [_jsx(Heart, { className: "mx-auto mb-2 text-red-400", size: 24 }), _jsxs("div", { className: "text-2xl font-bold", children: ["$", behaviorData.lossesToday] }), _jsx("div", { className: "text-white/60 text-sm", children: "Today's Losses" })] })] }), _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "card-modern p-6", children: [_jsx("h3", { className: "text-lg font-bold mb-4", children: "Spending Trends" }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { children: "This Week" }), _jsxs("span", { className: "font-bold text-winnex-orange", children: ["$", behaviorData.weeklySpend] })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { children: "This Month" }), _jsxs("span", { className: "font-bold text-winnex-orange", children: ["$", behaviorData.monthlySpend] })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { children: "Average Session" }), _jsxs("span", { className: "font-bold", children: [behaviorData.avgSessionLength, "m"] })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { children: "Biggest Loss" }), _jsxs("span", { className: "font-bold text-red-400", children: ["$", behaviorData.biggestLoss] })] })] })] }), _jsxs("div", { className: "card-modern p-6", children: [_jsx("h3", { className: "text-lg font-bold mb-4", children: "Behavior Patterns" }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { children: "Consecutive Losses" }), _jsx("span", { className: `font-bold ${behaviorData.consecutiveLosses > 5 ? 'text-red-400' : 'text-white'}`, children: behaviorData.consecutiveLosses })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { children: "Risk Assessment" }), _jsx("span", { className: `font-bold ${getRiskColor(behaviorData.riskScore)}`, children: behaviorData.riskScore < 30 ? 'Low' :
                                                            behaviorData.riskScore < 70 ? 'Medium' : 'High' })] })] })] })] })] })), activeTab === 'limits' && (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "card-modern p-6", children: [_jsx("h3", { className: "text-lg font-bold mb-4", children: "Deposit Limits" }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium mb-2", children: "Daily Limit" }), _jsx("input", { type: "number", value: settings?.dailyDepositLimit || '', onChange: (e) => updateSettings.mutate({ dailyDepositLimit: parseFloat(e.target.value) || null }), placeholder: "No limit set", className: "w-full p-3 bg-secondary rounded-lg border border-white/10 text-white" })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium mb-2", children: "Weekly Limit" }), _jsx("input", { type: "number", value: settings?.weeklyDepositLimit || '', onChange: (e) => updateSettings.mutate({ weeklyDepositLimit: parseFloat(e.target.value) || null }), placeholder: "No limit set", className: "w-full p-3 bg-secondary rounded-lg border border-white/10 text-white" })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium mb-2", children: "Monthly Limit" }), _jsx("input", { type: "number", value: settings?.monthlyDepositLimit || '', onChange: (e) => updateSettings.mutate({ monthlyDepositLimit: parseFloat(e.target.value) || null }), placeholder: "No limit set", className: "w-full p-3 bg-secondary rounded-lg border border-white/10 text-white" })] })] })] }), _jsxs("div", { className: "card-modern p-6", children: [_jsx("h3", { className: "text-lg font-bold mb-4", children: "Betting Limits" }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium mb-2", children: "Daily Bet Limit" }), _jsx("input", { type: "number", value: settings?.dailyBetLimit || '', onChange: (e) => updateSettings.mutate({ dailyBetLimit: parseFloat(e.target.value) || null }), placeholder: "No limit set", className: "w-full p-3 bg-secondary rounded-lg border border-white/10 text-white" })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium mb-2", children: "Weekly Bet Limit" }), _jsx("input", { type: "number", value: settings?.weeklyBetLimit || '', onChange: (e) => updateSettings.mutate({ weeklyBetLimit: parseFloat(e.target.value) || null }), placeholder: "No limit set", className: "w-full p-3 bg-secondary rounded-lg border border-white/10 text-white" })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium mb-2", children: "Loss Limit" }), _jsx("input", { type: "number", value: settings?.lossLimit || '', onChange: (e) => updateSettings.mutate({ lossLimit: parseFloat(e.target.value) || null }), placeholder: "No limit set", className: "w-full p-3 bg-secondary rounded-lg border border-white/10 text-white" })] })] })] })] }), _jsxs("div", { className: "card-modern p-6", children: [_jsx("h3", { className: "text-lg font-bold mb-4", children: "Session Management" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4", children: [_jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium mb-2", children: "Session Time Limit (minutes)" }), _jsx("input", { type: "number", value: settings?.sessionTimeLimit || '', onChange: (e) => updateSettings.mutate({ sessionTimeLimit: parseFloat(e.target.value) || null }), placeholder: "No limit", className: "w-full p-3 bg-secondary rounded-lg border border-white/10 text-white" })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium mb-2", children: "Reality Check Interval (minutes)" }), _jsx("input", { type: "number", value: settings?.realityCheckInterval || '', onChange: (e) => updateSettings.mutate({ realityCheckInterval: parseFloat(e.target.value) || null }), placeholder: "No reminders", className: "w-full p-3 bg-secondary rounded-lg border border-white/10 text-white" })] }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium mb-2", children: "Auto Logout (minutes)" }), _jsx("input", { type: "number", value: settings?.autoLogoutAfter || '', onChange: (e) => updateSettings.mutate({ autoLogoutAfter: parseFloat(e.target.value) || null }), placeholder: "No auto logout", className: "w-full p-3 bg-secondary rounded-lg border border-white/10 text-white" })] })] })] })] })), activeTab === 'tools' && (_jsx("div", { className: "space-y-6", children: _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs("div", { className: "card-modern p-6", children: [_jsxs("h3", { className: "text-lg font-bold mb-4 flex items-center", children: [_jsx(PauseCircle, { className: "mr-2 text-winnex-orange" }), "Take a Break"] }), _jsx("p", { className: "text-white/80 mb-6", children: "Temporarily restrict your account access to help you take a break from betting." }), _jsxs("div", { className: "space-y-3", children: [_jsx("button", { onClick: () => takeCooloff.mutate(1), className: "btn-secondary w-full", disabled: takeCooloff.isPending, children: "1 Hour Break" }), _jsx("button", { onClick: () => takeCooloff.mutate(24), className: "btn-secondary w-full", disabled: takeCooloff.isPending, children: "24 Hour Break" }), _jsx("button", { onClick: () => takeCooloff.mutate(168), className: "btn-secondary w-full", disabled: takeCooloff.isPending, children: "7 Day Break" })] })] }), _jsxs("div", { className: "card-modern p-6", children: [_jsxs("h3", { className: "text-lg font-bold mb-4 flex items-center", children: [_jsx(Eye, { className: "mr-2 text-red-400" }), "Self-Exclusion"] }), _jsx("p", { className: "text-white/80 mb-6", children: "Permanently exclude yourself from Winnex for a set period. This cannot be reversed." }), _jsxs("div", { className: "space-y-3", children: [_jsx("button", { onClick: () => selfExclude.mutate(30), className: "btn-outline w-full border-red-500 text-red-400 hover:bg-red-500/10", disabled: selfExclude.isPending, children: "30 Days" }), _jsx("button", { onClick: () => selfExclude.mutate(90), className: "btn-outline w-full border-red-500 text-red-400 hover:bg-red-500/10", disabled: selfExclude.isPending, children: "3 Months" }), _jsx("button", { onClick: () => selfExclude.mutate(365), className: "btn-outline w-full border-red-500 text-red-400 hover:bg-red-500/10", disabled: selfExclude.isPending, children: "1 Year" })] })] })] }) })), activeTab === 'support' && (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { className: "card-modern p-6 bg-gradient-to-r from-blue-900/30 to-purple-900/30 border border-blue-500/20", children: [_jsx("h3", { className: "text-xl font-bold mb-4", children: "Remember: Gambling Should Be Fun" }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { children: [_jsx("h4", { className: "font-semibold mb-2", children: "Signs of Problem Gambling:" }), _jsxs("ul", { className: "text-sm text-white/80 space-y-1", children: [_jsx("li", { children: "\u2022 Betting more than you can afford" }), _jsx("li", { children: "\u2022 Chasing losses with bigger bets" }), _jsx("li", { children: "\u2022 Neglecting responsibilities" }), _jsx("li", { children: "\u2022 Borrowing money to gamble" }), _jsx("li", { children: "\u2022 Feeling anxious when not betting" })] })] }), _jsxs("div", { children: [_jsx("h4", { className: "font-semibold mb-2", children: "Healthy Gambling Tips:" }), _jsxs("ul", { className: "text-sm text-white/80 space-y-1", children: [_jsx("li", { children: "\u2022 Set limits before you start" }), _jsx("li", { children: "\u2022 Never chase your losses" }), _jsx("li", { children: "\u2022 Take regular breaks" }), _jsx("li", { children: "\u2022 Don't gamble when upset" }), _jsx("li", { children: "\u2022 Keep gambling social and fun" })] })] })] })] }), _jsx("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: supportResources.map((resource, index) => (_jsxs("div", { className: "card-modern p-6", children: [_jsx("h4", { className: "font-bold text-lg mb-2", children: resource.organization }), _jsx("p", { className: "text-white/80 text-sm mb-4", children: resource.description }), _jsxs("div", { className: "space-y-2 text-sm", children: [_jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Contact:" }), _jsx("span", { className: "font-medium text-winnex-blue", children: resource.contact })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Type:" }), _jsx("span", { className: "capitalize", children: resource.type })] }), _jsxs("div", { className: "flex justify-between", children: [_jsx("span", { children: "Available:" }), _jsx("span", { className: resource.available24h ? 'text-winnex-green' : 'text-winnex-orange', children: resource.available24h ? '24/7' : 'Business Hours' })] })] }), _jsx("button", { className: "btn-primary w-full mt-4", children: "Contact Support" })] }, index))) })] }))] }));
}
