import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { AlertTriangle, TrendingUp, Shield, Target } from 'lucide-react';
import { apiRequest } from '@/lib/queryClient';
export default function RiskManagement() {
    const [selectedUser, setSelectedUser] = useState('');
    const queryClient = useQueryClient();
    const { data: riskProfiles } = useQuery({
        queryKey: ['/api/risk/profiles'],
        queryFn: () => apiRequest('/api/risk/profiles'),
    });
    const { data: exposureData } = useQuery({
        queryKey: ['/api/risk/exposure'],
        queryFn: () => apiRequest('/api/risk/exposure'),
    });
    const { data: limitSettings } = useQuery({
        queryKey: ['/api/risk/limits'],
        queryFn: () => apiRequest('/api/risk/limits'),
    });
    const updateLimitsMutation = useMutation({
        mutationFn: (data) => apiRequest('/api/risk/limits', 'PUT', data),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/risk/limits'] });
        },
    });
    const flagUserMutation = useMutation({
        mutationFn: (data) => apiRequest('/api/risk/flag-user', 'POST', data),
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ['/api/risk/profiles'] });
        },
    });
    const highRiskUsers = riskProfiles?.filter((profile) => profile.riskLevel === 'high' || profile.riskLevel === 'critical') || [];
    const totalExposure = exposureData?.totalExposure || 0;
    const maxExposure = limitSettings?.maxDailyExposure || 1000000;
    const exposurePercentage = (totalExposure / maxExposure) * 100;
    return (_jsx("div", { className: "min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-6", children: _jsxs("div", { className: "max-w-7xl mx-auto", children: [_jsxs("div", { className: "mb-8", children: [_jsx("h1", { className: "text-4xl font-bold text-white mb-2", children: "Risk Management Center" }), _jsx("p", { className: "text-slate-300", children: "Monitor exposure, manage limits, and control operational risk" })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-6 mb-8", children: [_jsx(Card, { className: "bg-black/20 border-red-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-red-400 text-sm font-medium", children: "Critical Alerts" }), _jsx("p", { className: "text-3xl font-bold text-white", children: highRiskUsers.length })] }), _jsx(AlertTriangle, { className: "h-8 w-8 text-red-400" })] }) }) }), _jsx(Card, { className: "bg-black/20 border-orange-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-orange-400 text-sm font-medium", children: "Total Exposure" }), _jsxs("p", { className: "text-3xl font-bold text-white", children: ["$", totalExposure.toLocaleString()] })] }), _jsx(TrendingUp, { className: "h-8 w-8 text-orange-400" })] }) }) }), _jsx(Card, { className: "bg-black/20 border-blue-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-blue-400 text-sm font-medium", children: "Active Limits" }), _jsx("p", { className: "text-3xl font-bold text-white", children: "12" })] }), _jsx(Shield, { className: "h-8 w-8 text-blue-400" })] }) }) }), _jsx(Card, { className: "bg-black/20 border-green-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-green-400 text-sm font-medium", children: "Exposure Utilization" }), _jsxs("p", { className: "text-3xl font-bold text-white", children: [exposurePercentage.toFixed(1), "%"] })] }), _jsx(Target, { className: "h-8 w-8 text-green-400" })] }) }) })] }), _jsxs(Tabs, { defaultValue: "exposure", className: "space-y-6", children: [_jsxs(TabsList, { className: "bg-black/20 backdrop-blur-xl border-white/10", children: [_jsx(TabsTrigger, { value: "exposure", className: "data-[state=active]:bg-green-500/20", children: "Exposure Management" }), _jsx(TabsTrigger, { value: "profiles", className: "data-[state=active]:bg-green-500/20", children: "Risk Profiles" }), _jsx(TabsTrigger, { value: "limits", className: "data-[state=active]:bg-green-500/20", children: "Limit Settings" }), _jsx(TabsTrigger, { value: "monitoring", className: "data-[state=active]:bg-green-500/20", children: "Live Monitoring" })] }), _jsxs(TabsContent, { value: "exposure", className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-white", children: "Exposure by Sport" }) }), _jsx(CardContent, { className: "space-y-4", children: exposureData?.sportExposure?.map((sport, index) => (_jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between text-sm", children: [_jsx("span", { className: "text-slate-300", children: sport.sport }), _jsxs("span", { className: "text-white", children: ["$", sport.exposure.toLocaleString()] })] }), _jsx(Progress, { value: sport.percentage, className: "h-2 bg-slate-800" }), _jsxs("div", { className: "flex justify-between text-xs text-slate-400", children: [_jsxs("span", { children: ["Limit: $", sport.limit.toLocaleString()] }), _jsxs("span", { children: [sport.percentage.toFixed(1), "% utilized"] })] })] }, index))) })] }), _jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-white", children: "Market Risk Analysis" }) }), _jsx(CardContent, { className: "space-y-4", children: exposureData?.marketExposure?.map((market, index) => (_jsxs("div", { className: "flex items-center justify-between p-3 bg-slate-800/30 rounded-lg", children: [_jsxs("div", { children: [_jsx("p", { className: "text-white font-medium", children: market.market }), _jsxs("p", { className: "text-slate-400 text-sm", children: ["$", market.exposure.toLocaleString(), " exposure"] })] }), _jsx(Badge, { variant: market.riskLevel === 'high' ? 'destructive' : 'secondary', className: "bg-opacity-20", children: market.riskLevel })] }, index))) })] })] }), _jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-white", children: "Exposure Overview" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-slate-300", children: "Total Exposure" }), _jsxs("span", { className: "text-2xl font-bold text-white", children: ["$", totalExposure.toLocaleString()] })] }), _jsx(Progress, { value: exposurePercentage, className: "h-3 bg-slate-800" }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 pt-4", children: [_jsxs("div", { className: "text-center", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Largest Single Bet" }), _jsxs("p", { className: "text-white font-bold", children: ["$", exposureData?.largestSingleBet?.toLocaleString() || 0] })] }), _jsxs("div", { className: "text-center", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Worst Case Scenario" }), _jsxs("p", { className: "text-red-400 font-bold", children: ["$", exposureData?.worstCaseScenario?.toLocaleString() || 0] })] }), _jsxs("div", { className: "text-center", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Available Capacity" }), _jsxs("p", { className: "text-green-400 font-bold", children: ["$", (maxExposure - totalExposure).toLocaleString()] })] }), _jsxs("div", { className: "text-center", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "Utilization" }), _jsxs("p", { className: "text-blue-400 font-bold", children: [exposurePercentage.toFixed(1), "%"] })] })] })] }) })] })] }), _jsx(TabsContent, { value: "profiles", className: "space-y-6", children: _jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-white", children: "High Risk User Profiles" }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: highRiskUsers.map((profile, index) => (_jsxs("div", { className: "p-4 bg-slate-800/30 rounded-lg border border-red-500/20", children: [_jsxs("div", { className: "flex items-center justify-between mb-3", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("div", { className: "w-10 h-10 bg-gradient-to-br from-red-500 to-pink-500 rounded-full flex items-center justify-center", children: _jsx("span", { className: "text-white font-bold text-sm", children: profile.userId.slice(0, 2).toUpperCase() }) }), _jsxs("div", { children: [_jsxs("p", { className: "text-white font-medium", children: ["User ", profile.userId] }), _jsxs("p", { className: "text-slate-400 text-sm", children: ["Risk Score: ", profile.riskScore] })] })] }), _jsx(Badge, { variant: profile.riskLevel === 'critical' ? 'destructive' : 'secondary', className: "bg-opacity-20", children: profile.riskLevel })] }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 mb-3", children: [_jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-xs", children: "Current Exposure" }), _jsxs("p", { className: "text-white font-bold", children: ["$", profile.currentExposure?.toLocaleString()] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-xs", children: "Win/Loss Ratio" }), _jsx("p", { className: "text-white font-bold", children: profile.winLossRatio?.toFixed(2) })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-xs", children: "Avg Bet Size" }), _jsxs("p", { className: "text-white font-bold", children: ["$", profile.avgBetSize?.toLocaleString()] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-xs", children: "Consecutive Losses" }), _jsx("p", { className: "text-red-400 font-bold", children: profile.consecutiveLosses })] })] }), profile.flags && profile.flags.length > 0 && (_jsxs("div", { className: "space-y-2", children: [_jsx("p", { className: "text-slate-300 text-sm font-medium", children: "Active Flags:" }), profile.flags.map((flag, flagIndex) => (_jsxs(Alert, { className: "bg-red-900/20 border-red-500/20", children: [_jsx(AlertTriangle, { className: "h-4 w-4" }), _jsx(AlertDescription, { className: "text-red-300", children: flag.message })] }, flagIndex)))] })), _jsxs("div", { className: "flex space-x-2 mt-3", children: [_jsx(Button, { size: "sm", variant: "outline", className: "border-red-500/20 text-red-400 hover:bg-red-500/10", onClick: () => flagUserMutation.mutate({
                                                                    userId: profile.userId,
                                                                    flag: 'manual_review',
                                                                    reason: 'High risk profile flagged for manual review'
                                                                }), children: "Flag for Review" }), _jsx(Button, { size: "sm", variant: "outline", className: "border-orange-500/20 text-orange-400 hover:bg-orange-500/10", children: "Apply Limits" })] })] }, index))) }) })] }) }), _jsx(TabsContent, { value: "limits", className: "space-y-6", children: _jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-white", children: "Risk Limit Configuration" }) }), _jsxs(CardContent, { className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: [_jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "maxSingleBet", className: "text-slate-300", children: "Maximum Single Bet" }), _jsx(Input, { id: "maxSingleBet", type: "number", defaultValue: limitSettings?.maxSingleBet || 10000, className: "bg-slate-800/50 border-slate-600 text-white" })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "maxDailyExposure", className: "text-slate-300", children: "Maximum Daily Exposure" }), _jsx(Input, { id: "maxDailyExposure", type: "number", defaultValue: limitSettings?.maxDailyExposure || 1000000, className: "bg-slate-800/50 border-slate-600 text-white" })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "maxWeeklyExposure", className: "text-slate-300", children: "Maximum Weekly Exposure" }), _jsx(Input, { id: "maxWeeklyExposure", type: "number", defaultValue: limitSettings?.maxWeeklyExposure || 5000000, className: "bg-slate-800/50 border-slate-600 text-white" })] })] }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { children: [_jsx(Label, { htmlFor: "maxUserWinnings", className: "text-slate-300", children: "Maximum User Winnings" }), _jsx(Input, { id: "maxUserWinnings", type: "number", defaultValue: limitSettings?.maxUserWinnings || 100000, className: "bg-slate-800/50 border-slate-600 text-white" })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "suspiciousThreshold", className: "text-slate-300", children: "Suspicious Pattern Threshold" }), _jsx(Input, { id: "suspiciousThreshold", type: "number", defaultValue: limitSettings?.suspiciousPatternThreshold || 85, className: "bg-slate-800/50 border-slate-600 text-white" })] }), _jsxs("div", { children: [_jsx(Label, { htmlFor: "velocityLimit", className: "text-slate-300", children: "Betting Velocity Limit (bets/hour)" }), _jsx(Input, { id: "velocityLimit", type: "number", defaultValue: limitSettings?.velocityLimit || 20, className: "bg-slate-800/50 border-slate-600 text-white" })] })] })] }), _jsx(Button, { className: "w-full bg-green-500 hover:bg-green-600 text-white", onClick: () => updateLimitsMutation.mutate(limitSettings), children: "Update Risk Limits" })] })] }) }), _jsx(TabsContent, { value: "monitoring", className: "space-y-6", children: _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6", children: [_jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-white text-lg", children: "Live Alerts" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-3", children: [_jsxs(Alert, { className: "bg-red-900/20 border-red-500/20", children: [_jsx(AlertTriangle, { className: "h-4 w-4" }), _jsx(AlertDescription, { className: "text-red-300", children: "User ABC123 exceeded velocity limit" })] }), _jsxs(Alert, { className: "bg-orange-900/20 border-orange-500/20", children: [_jsx(AlertTriangle, { className: "h-4 w-4" }), _jsx(AlertDescription, { className: "text-orange-300", children: "Football exposure at 85% of daily limit" })] }), _jsxs(Alert, { className: "bg-yellow-900/20 border-yellow-500/20", children: [_jsx(AlertTriangle, { className: "h-4 w-4" }), _jsx(AlertDescription, { className: "text-yellow-300", children: "Unusual betting pattern detected" })] })] }) })] }), _jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-white text-lg", children: "System Health" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-slate-300", children: "Risk Engine" }), _jsx(Badge, { className: "bg-green-500/20 text-green-400", children: "Online" })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-slate-300", children: "Fraud Detection" }), _jsx(Badge, { className: "bg-green-500/20 text-green-400", children: "Active" })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-slate-300", children: "Limit Monitoring" }), _jsx(Badge, { className: "bg-green-500/20 text-green-400", children: "Running" })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-slate-300", children: "Auto-Balancing" }), _jsx(Badge, { className: "bg-blue-500/20 text-blue-400", children: "Enabled" })] })] }) })] }), _jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-white text-lg", children: "Quick Actions" }) }), _jsxs(CardContent, { className: "space-y-3", children: [_jsx(Button, { className: "w-full bg-red-500/20 border border-red-500/30 text-red-400 hover:bg-red-500/30", children: "Emergency Stop" }), _jsx(Button, { className: "w-full bg-orange-500/20 border border-orange-500/30 text-orange-400 hover:bg-orange-500/30", children: "Tighten Limits" }), _jsx(Button, { className: "w-full bg-blue-500/20 border border-blue-500/30 text-blue-400 hover:bg-blue-500/30", children: "Generate Report" }), _jsx(Button, { className: "w-full bg-green-500/20 border border-green-500/30 text-green-400 hover:bg-green-500/30", children: "Manual Balance" })] })] })] }) })] })] }) }));
}
