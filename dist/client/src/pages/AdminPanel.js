import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Link } from 'wouter';
import { apiRequest } from '@/lib/queryClient';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from '@/hooks/use-toast';
import { Shield, Users, Settings, BarChart3, Zap, Database, Activity, Lock, UserCheck, Crown, AlertCircle } from 'lucide-react';
export default function AdminPanel() {
    const { toast } = useToast();
    const queryClient = useQueryClient();
    const [activeTab, setActiveTab] = useState('overview');
    // Get admin status and permissions
    const { data: adminStatus, isLoading: statusLoading } = useQuery({
        queryKey: ['/api/admin/status'],
        retry: false,
    });
    // Get admin panel data
    const { data: panelData, isLoading: panelLoading } = useQuery({
        queryKey: ['/api/admin/panel'],
        enabled: adminStatus?.hasAdminAccess,
        retry: false,
    });
    // Get admin users
    const { data: adminUsers = [], isLoading: usersLoading } = useQuery({
        queryKey: ['/api/admin/users'],
        enabled: adminStatus?.canManageUsers,
    });
    // Admin login mutation for separate admin portal
    const adminLoginMutation = useMutation({
        mutationFn: () => apiRequest('POST', '/api/admin/login'),
        onSuccess: () => {
            toast({
                title: "Admin Session Created",
                description: "You now have access to the admin portal.",
            });
            queryClient.invalidateQueries();
        },
        onError: (error) => {
            toast({
                title: "Admin Login Failed",
                description: error.message || "Failed to create admin session",
                variant: "destructive",
            });
        },
    });
    if (statusLoading) {
        return (_jsx("div", { className: "min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 p-6", children: _jsx("div", { className: "max-w-7xl mx-auto", children: _jsx("div", { className: "animate-spin w-8 h-8 border-4 border-white border-t-transparent rounded-full mx-auto mt-20" }) }) }));
    }
    if (!adminStatus?.hasAdminAccess) {
        return (_jsx("div", { className: "min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900 p-6", children: _jsx("div", { className: "max-w-4xl mx-auto", children: _jsxs("div", { className: "text-center py-20", children: [_jsx(Lock, { className: "w-24 h-24 text-red-400 mx-auto mb-6" }), _jsx("h1", { className: "text-4xl font-bold text-white mb-4", children: "Access Denied" }), _jsx("p", { className: "text-xl text-gray-300 mb-8", children: "You don't have permission to access the admin panel." }), _jsxs("div", { className: "bg-red-500/20 border border-red-500 rounded-lg p-6 max-w-md mx-auto mb-8", children: [_jsx(AlertCircle, { className: "w-8 h-8 text-red-400 mx-auto mb-3" }), _jsx("p", { className: "text-red-200 text-sm", children: "Admin access required. Contact your system administrator to request elevated permissions." })] }), _jsx(Link, { href: "/", children: _jsx(Button, { size: "lg", className: "bg-blue-600 hover:bg-blue-700", children: "Return to Platform" }) })] }) }) }));
    }
    const modules = panelData?.modules || {};
    return (_jsxs("div", { className: "min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900", children: [_jsx("div", { className: "bg-black/30 backdrop-blur-sm border-b border-gray-700", children: _jsx("div", { className: "max-w-7xl mx-auto px-6 py-4", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center space-x-4", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx(Shield, { className: "w-8 h-8 text-yellow-400" }), _jsx("h1", { className: "text-2xl font-bold text-white", children: "Admin Panel" })] }), _jsx(Badge, { className: "bg-yellow-500 text-black font-semibold", children: adminStatus.role?.toUpperCase() })] }), _jsxs("div", { className: "flex items-center space-x-4", children: [_jsx(Link, { href: "/", children: _jsx(Button, { variant: "outline", size: "sm", children: "Back to Platform" }) }), _jsx(Button, { onClick: () => adminLoginMutation.mutate(), disabled: adminLoginMutation.isPending, size: "sm", className: "bg-yellow-600 hover:bg-yellow-700", children: adminLoginMutation.isPending ? "Creating..." : "Create Admin Session" })] })] }) }) }), _jsx("div", { className: "max-w-7xl mx-auto p-6", children: _jsxs(Tabs, { value: activeTab, onValueChange: setActiveTab, className: "space-y-6", children: [_jsxs(TabsList, { className: "grid w-full grid-cols-4 lg:grid-cols-6 bg-black/30", children: [_jsx(TabsTrigger, { value: "overview", children: "Overview" }), _jsx(TabsTrigger, { value: "modules", children: "Modules" }), _jsx(TabsTrigger, { value: "users", disabled: !adminStatus.canManageUsers, children: "Users" }), _jsx(TabsTrigger, { value: "permissions", children: "Permissions" }), _jsx(TabsTrigger, { value: "activity", children: "Activity" }), _jsx(TabsTrigger, { value: "settings", children: "Settings" })] }), _jsxs(TabsContent, { value: "overview", className: "space-y-6", children: [_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6", children: [_jsxs(Card, { className: "bg-black/40 border-gray-700", children: [_jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: [_jsx(CardTitle, { className: "text-sm font-medium text-white", children: "Admin Level" }), _jsx(Crown, { className: "h-4 w-4 text-yellow-400" })] }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold text-white capitalize", children: adminStatus.role }), _jsx("p", { className: "text-xs text-gray-400", children: "Your access level" })] })] }), _jsxs(Card, { className: "bg-black/40 border-gray-700", children: [_jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: [_jsx(CardTitle, { className: "text-sm font-medium text-white", children: "Permissions" }), _jsx(UserCheck, { className: "h-4 w-4 text-green-400" })] }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold text-white", children: adminStatus.permissions?.length || 0 }), _jsx("p", { className: "text-xs text-gray-400", children: "Active permissions" })] })] }), _jsxs(Card, { className: "bg-black/40 border-gray-700", children: [_jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: [_jsx(CardTitle, { className: "text-sm font-medium text-white", children: "Admin Users" }), _jsx(Users, { className: "h-4 w-4 text-blue-400" })] }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold text-white", children: adminUsers.length }), _jsx("p", { className: "text-xs text-gray-400", children: "Total administrators" })] })] }), _jsxs(Card, { className: "bg-black/40 border-gray-700", children: [_jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: [_jsx(CardTitle, { className: "text-sm font-medium text-white", children: "Status" }), _jsx(Activity, { className: "h-4 w-4 text-green-400" })] }), _jsxs(CardContent, { children: [_jsx("div", { className: "text-2xl font-bold text-green-400", children: "Active" }), _jsx("p", { className: "text-xs text-gray-400", children: "Session status" })] })] })] }), _jsxs(Card, { className: "bg-black/40 border-gray-700", children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { className: "text-white", children: "Your Permissions" }), _jsx(CardDescription, { className: "text-gray-400", children: "Current access rights and capabilities" })] }), _jsx(CardContent, { children: _jsx("div", { className: "grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3", children: adminStatus.permissions?.map((permission) => (_jsx(Badge, { variant: "outline", className: "justify-center py-2 text-xs border-gray-600 text-gray-300", children: permission.replace(/_/g, ' ').toUpperCase() }, permission))) || [] }) })] })] }), _jsx(TabsContent, { value: "modules", className: "space-y-6", children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6", children: [_jsxs(Card, { className: "bg-black/40 border-gray-700", children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "text-white flex items-center space-x-2", children: [_jsx(Database, { className: "w-5 h-5" }), _jsx("span", { children: "Customer CRM" })] }), _jsx(CardDescription, { className: "text-gray-400", children: "Customer relationship management and analytics" })] }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-sm text-gray-300", children: "Access" }), _jsx(Badge, { className: modules.crm ? "bg-green-600" : "bg-red-600", children: modules.crm ? "Granted" : "Denied" })] }), modules.crm && (_jsx(Link, { href: "/crm", children: _jsx(Button, { size: "sm", className: "w-full bg-blue-600 hover:bg-blue-700", children: "Open CRM Dashboard" }) }))] })] }), _jsxs(Card, { className: "bg-black/40 border-gray-700", children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "text-white flex items-center space-x-2", children: [_jsx(BarChart3, { className: "w-5 h-5" }), _jsx("span", { children: "Analytics" })] }), _jsx(CardDescription, { className: "text-gray-400", children: "Platform analytics and reporting" })] }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-sm text-gray-300", children: "Access" }), _jsx(Badge, { className: modules.analytics ? "bg-green-600" : "bg-red-600", children: modules.analytics ? "Granted" : "Denied" })] }), modules.analytics && (_jsx(Button, { size: "sm", className: "w-full", disabled: true, children: "Coming Soon" }))] })] }), _jsxs(Card, { className: "bg-black/40 border-gray-700", children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "text-white flex items-center space-x-2", children: [_jsx(Users, { className: "w-5 h-5" }), _jsx("span", { children: "User Management" })] }), _jsx(CardDescription, { className: "text-gray-400", children: "Manage users, roles, and permissions" })] }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-sm text-gray-300", children: "Access" }), _jsx(Badge, { className: modules.userManagement ? "bg-green-600" : "bg-red-600", children: modules.userManagement ? "Granted" : "Denied" })] }), modules.userManagement && (_jsx(Button, { size: "sm", className: "w-full", disabled: true, children: "Coming Soon" }))] })] }), _jsxs(Card, { className: "bg-black/40 border-gray-700", children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "text-white flex items-center space-x-2", children: [_jsx(Settings, { className: "w-5 h-5" }), _jsx("span", { children: "System Settings" })] }), _jsx(CardDescription, { className: "text-gray-400", children: "Platform configuration and settings" })] }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-sm text-gray-300", children: "Access" }), _jsx(Badge, { className: modules.systemSettings ? "bg-green-600" : "bg-red-600", children: modules.systemSettings ? "Granted" : "Denied" })] }), modules.systemSettings && (_jsx(Button, { size: "sm", className: "w-full", disabled: true, children: "Coming Soon" }))] })] }), _jsxs(Card, { className: "bg-black/40 border-gray-700", children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "text-white flex items-center space-x-2", children: [_jsx(Shield, { className: "w-5 h-5" }), _jsx("span", { children: "Security" })] }), _jsx(CardDescription, { className: "text-gray-400", children: "Security logs and monitoring" })] }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-sm text-gray-300", children: "Access" }), _jsx(Badge, { className: modules.security ? "bg-green-600" : "bg-red-600", children: modules.security ? "Granted" : "Denied" })] }), modules.security && (_jsx(Button, { size: "sm", className: "w-full", disabled: true, children: "Coming Soon" }))] })] }), _jsxs(Card, { className: "bg-black/40 border-gray-700", children: [_jsxs(CardHeader, { children: [_jsxs(CardTitle, { className: "text-white flex items-center space-x-2", children: [_jsx(Zap, { className: "w-5 h-5" }), _jsx("span", { children: "Performance" })] }), _jsx(CardDescription, { className: "text-gray-400", children: "System performance monitoring" })] }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-sm text-gray-300", children: "Access" }), _jsx(Badge, { className: "bg-green-600", children: "Granted" })] }), _jsx(Link, { href: "/performance-optimizer", children: _jsx(Button, { size: "sm", className: "w-full bg-purple-600 hover:bg-purple-700", children: "Open Performance Monitor" }) })] })] })] }) }), _jsx(TabsContent, { value: "users", children: _jsxs(Card, { className: "bg-black/40 border-gray-700", children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { className: "text-white", children: "Admin Users" }), _jsx(CardDescription, { className: "text-gray-400", children: "Manage administrator accounts and permissions" })] }), _jsx(CardContent, { children: _jsx("p", { className: "text-gray-400", children: "User management interface coming soon..." }) })] }) }), _jsx(TabsContent, { value: "permissions", children: _jsxs(Card, { className: "bg-black/40 border-gray-700", children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { className: "text-white", children: "Permission Management" }), _jsx(CardDescription, { className: "text-gray-400", children: "Configure roles and permissions" })] }), _jsx(CardContent, { children: _jsx("p", { className: "text-gray-400", children: "Permission management interface coming soon..." }) })] }) }), _jsx(TabsContent, { value: "activity", children: _jsxs(Card, { className: "bg-black/40 border-gray-700", children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { className: "text-white", children: "Admin Activity" }), _jsx(CardDescription, { className: "text-gray-400", children: "Monitor administrator activities and sessions" })] }), _jsx(CardContent, { children: _jsx("p", { className: "text-gray-400", children: "Activity monitoring interface coming soon..." }) })] }) }), _jsx(TabsContent, { value: "settings", children: _jsxs(Card, { className: "bg-black/40 border-gray-700", children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { className: "text-white", children: "Admin Settings" }), _jsx(CardDescription, { className: "text-gray-400", children: "Configure admin panel preferences" })] }), _jsx(CardContent, { children: _jsx("p", { className: "text-gray-400", children: "Settings interface coming soon..." }) })] }) })] }) })] }));
}
