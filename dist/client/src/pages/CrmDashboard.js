import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { motion } from "framer-motion";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow, } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Users, DollarSign, AlertTriangle, MessageSquare, Shield, Search, Plus, RefreshCw } from "lucide-react";
import { useQuery } from "@tanstack/react-query";
import { useToast } from "@/hooks/use-toast";
export default function CrmDashboard() {
    const [searchQuery, setSearchQuery] = useState("");
    const { toast } = useToast();
    // Fetch CRM analytics with fallback data
    const { data: analytics, isLoading: analyticsLoading } = useQuery({
        queryKey: ["/api/crm/analytics"],
        refetchInterval: 30000,
    });
    // Fetch users data with fallback
    const { data: users, isLoading: usersLoading } = useQuery({
        queryKey: ["/api/crm/users"],
        refetchInterval: 30000,
    });
    // Fetch risk alerts
    const { data: alerts, isLoading: alertsLoading } = useQuery({
        queryKey: ["/api/crm/risk-alerts"],
        refetchInterval: 30000,
    });
    // Fetch support tickets
    const { data: tickets, isLoading: ticketsLoading } = useQuery({
        queryKey: ["/api/crm/support-tickets"],
        refetchInterval: 30000,
    });
    const getStatusColor = (status) => {
        const statusColors = {
            'active': 'bg-green-500 text-white',
            'suspended': 'bg-yellow-500 text-black',
            'banned': 'bg-red-500 text-white',
            'pending': 'bg-orange-500 text-white',
            'advanced': 'bg-green-500 text-white',
            'intermediate': 'bg-blue-500 text-white',
            'basic': 'bg-yellow-500 text-black',
            'rejected': 'bg-red-500 text-white',
            'clear': 'bg-green-500 text-white',
            'flagged': 'bg-red-500 text-white',
            'under_review': 'bg-yellow-500 text-black',
            'blocked': 'bg-red-700 text-white',
            'open': 'bg-red-500 text-white',
            'in_progress': 'bg-yellow-500 text-black',
            'resolved': 'bg-green-500 text-white',
            'closed': 'bg-gray-500 text-white'
        };
        return statusColors[status?.toLowerCase()] || 'bg-gray-500 text-white';
    };
    // Safe data access with defaults
    const safeAnalytics = analytics || {
        users: { bySegment: [] },
        transactions: { totalVolume: 0, transactionCount: 0 },
        alerts: 0,
        support: 0
    };
    const safeUsers = Array.isArray(users) ? users : [];
    const safeAlerts = Array.isArray(alerts) ? alerts : [];
    const safeTickets = Array.isArray(tickets) ? tickets : [];
    const totalUsers = safeAnalytics.users?.bySegment?.reduce((sum, s) => sum + (s.count || 0), 0) || 0;
    return (_jsxs("div", { className: "max-w-7xl mx-auto p-6 space-y-8", children: [_jsxs(motion.div, { className: "flex items-center justify-between", initial: { opacity: 0, y: -20 }, animate: { opacity: 1, y: 0 }, children: [_jsxs("div", { children: [_jsx("h1", { className: "text-3xl font-bold text-white", children: "CRM Dashboard" }), _jsx("p", { className: "text-gray-400 mt-1", children: "Customer Relationship Management System" })] }), _jsxs("div", { className: "flex gap-3", children: [_jsxs(Button, { variant: "outline", size: "sm", children: [_jsx(RefreshCw, { className: "h-4 w-4 mr-2" }), "Refresh"] }), _jsxs(Button, { size: "sm", children: [_jsx(Plus, { className: "h-4 w-4 mr-2" }), "New User"] })] })] }), _jsxs(motion.div, { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6", initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, transition: { delay: 0.1 }, children: [_jsx(Card, { className: "bg-gradient-to-br from-blue-500 to-blue-700 text-white border-0", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-blue-100", children: "Total Users" }), _jsx("p", { className: "text-3xl font-bold", children: analyticsLoading ? '...' : totalUsers })] }), _jsx(Users, { className: "h-8 w-8 text-blue-200" })] }) }) }), _jsx(Card, { className: "bg-gradient-to-br from-green-500 to-emerald-700 text-white border-0", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-emerald-100", children: "Transaction Volume" }), _jsx("p", { className: "text-3xl font-bold", children: analyticsLoading ? '...' : `$${(safeAnalytics.transactions?.totalVolume || 0).toLocaleString()}` })] }), _jsx(DollarSign, { className: "h-8 w-8 text-emerald-200" })] }) }) }), _jsx(Card, { className: "bg-gradient-to-br from-red-500 to-red-700 text-white border-0", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-red-100", children: "Risk Alerts" }), _jsx("p", { className: "text-3xl font-bold", children: alertsLoading ? '...' : safeAlerts.length })] }), _jsx(AlertTriangle, { className: "h-8 w-8 text-red-200" })] }) }) }), _jsx(Card, { className: "bg-gradient-to-br from-purple-500 to-purple-700 text-white border-0", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-purple-100", children: "Support Tickets" }), _jsx("p", { className: "text-3xl font-bold", children: ticketsLoading ? '...' : safeTickets.length })] }), _jsx(MessageSquare, { className: "h-8 w-8 text-purple-200" })] }) }) })] }), _jsx(motion.div, { initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, transition: { delay: 0.2 }, children: _jsxs(Tabs, { defaultValue: "users", className: "space-y-6", children: [_jsxs(TabsList, { className: "bg-gray-800 border-gray-700", children: [_jsx(TabsTrigger, { value: "users", className: "text-gray-300 data-[state=active]:text-white", children: "Users" }), _jsx(TabsTrigger, { value: "analytics", className: "text-gray-300 data-[state=active]:text-white", children: "Analytics" }), _jsx(TabsTrigger, { value: "alerts", className: "text-gray-300 data-[state=active]:text-white", children: "Risk Alerts" }), _jsx(TabsTrigger, { value: "support", className: "text-gray-300 data-[state=active]:text-white", children: "Support" })] }), _jsx(TabsContent, { value: "users", className: "space-y-6", children: _jsxs(Card, { className: "bg-gray-800 border-gray-700", children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx(CardTitle, { className: "text-white", children: "User Management" }), _jsx(CardDescription, { children: "Manage customer profiles and KYC status" })] }), _jsx("div", { className: "flex items-center gap-4", children: _jsxs("div", { className: "relative", children: [_jsx(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" }), _jsx(Input, { placeholder: "Search users...", value: searchQuery, onChange: (e) => setSearchQuery(e.target.value), className: "pl-10 bg-gray-700 border-gray-600 text-white" })] }) })] }) }), _jsx(CardContent, { children: usersLoading ? (_jsxs("div", { className: "flex items-center justify-center py-8", children: [_jsx(RefreshCw, { className: "h-6 w-6 animate-spin text-gray-400" }), _jsx("span", { className: "ml-2 text-gray-400", children: "Loading users..." })] })) : (_jsxs(Table, { children: [_jsx(TableHeader, { children: _jsxs(TableRow, { className: "border-gray-700", children: [_jsx(TableHead, { className: "text-gray-300", children: "User" }), _jsx(TableHead, { className: "text-gray-300", children: "Email" }), _jsx(TableHead, { className: "text-gray-300", children: "KYC Status" }), _jsx(TableHead, { className: "text-gray-300", children: "Risk Level" }), _jsx(TableHead, { className: "text-gray-300", children: "Actions" })] }) }), _jsx(TableBody, { children: safeUsers.length === 0 ? (_jsx(TableRow, { children: _jsx(TableCell, { colSpan: 5, className: "text-center text-gray-400 py-8", children: "No users found" }) })) : (safeUsers.slice(0, 10).map((user) => (_jsxs(TableRow, { className: "border-gray-700", children: [_jsx(TableCell, { className: "text-white", children: user.fullName || user.userId || 'N/A' }), _jsx(TableCell, { className: "text-gray-300", children: user.email || 'N/A' }), _jsx(TableCell, { children: _jsx(Badge, { className: getStatusColor(user.kycStatus), children: user.kycStatus || 'pending' }) }), _jsx(TableCell, { children: _jsx(Badge, { className: getStatusColor(user.riskLevel), children: user.riskLevel || 'clear' }) }), _jsx(TableCell, { children: _jsx(Button, { variant: "outline", size: "sm", children: "View Details" }) })] }, user.id)))) })] })) })] }) }), _jsx(TabsContent, { value: "analytics", className: "space-y-6", children: _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs(Card, { className: "bg-gray-800 border-gray-700", children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { className: "text-white", children: "User Segments" }), _jsx(CardDescription, { children: "Distribution of users by segment" })] }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: safeAnalytics.users?.bySegment?.map((segment) => (_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-gray-300 capitalize", children: segment.segment }), _jsx("span", { className: "text-white font-semibold", children: segment.count })] }, segment.segment))) || (_jsx("p", { className: "text-gray-400", children: "No segment data available" })) }) })] }), _jsxs(Card, { className: "bg-gray-800 border-gray-700", children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { className: "text-white", children: "System Status" }), _jsx(CardDescription, { children: "Current system health" })] }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-gray-300", children: "Database" }), _jsx(Badge, { className: "bg-green-500 text-white", children: "Online" })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-gray-300", children: "API Services" }), _jsx(Badge, { className: "bg-green-500 text-white", children: "Active" })] }), _jsxs("div", { className: "flex items-center justify-between", children: [_jsx("span", { className: "text-gray-300", children: "CRM System" }), _jsx(Badge, { className: "bg-green-500 text-white", children: "Running" })] })] }) })] })] }) }), _jsx(TabsContent, { value: "alerts", className: "space-y-6", children: _jsxs(Card, { className: "bg-gray-800 border-gray-700", children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { className: "text-white", children: "Risk Alerts" }), _jsx(CardDescription, { children: "Monitor and manage risk assessments" })] }), _jsx(CardContent, { children: alertsLoading ? (_jsxs("div", { className: "flex items-center justify-center py-8", children: [_jsx(RefreshCw, { className: "h-6 w-6 animate-spin text-gray-400" }), _jsx("span", { className: "ml-2 text-gray-400", children: "Loading alerts..." })] })) : safeAlerts.length === 0 ? (_jsxs("div", { className: "text-center py-8", children: [_jsx(Shield, { className: "h-12 w-12 text-gray-400 mx-auto mb-4" }), _jsx("p", { className: "text-gray-400", children: "No active risk alerts" })] })) : (_jsx("div", { className: "space-y-4", children: safeAlerts.map((alert) => (_jsx("div", { className: "p-4 bg-gray-700 rounded-lg", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("h4", { className: "text-white font-medium", children: alert.type }), _jsx("p", { className: "text-gray-400 text-sm", children: alert.description })] }), _jsx(Badge, { className: getStatusColor(alert.severity), children: alert.severity })] }) }, alert.id))) })) })] }) }), _jsx(TabsContent, { value: "support", className: "space-y-6", children: _jsxs(Card, { className: "bg-gray-800 border-gray-700", children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { className: "text-white", children: "Support Tickets" }), _jsx(CardDescription, { children: "Customer support and ticket management" })] }), _jsx(CardContent, { children: ticketsLoading ? (_jsxs("div", { className: "flex items-center justify-center py-8", children: [_jsx(RefreshCw, { className: "h-6 w-6 animate-spin text-gray-400" }), _jsx("span", { className: "ml-2 text-gray-400", children: "Loading tickets..." })] })) : (_jsxs(Table, { children: [_jsx(TableHeader, { children: _jsxs(TableRow, { className: "border-gray-700", children: [_jsx(TableHead, { className: "text-gray-300", children: "Ticket ID" }), _jsx(TableHead, { className: "text-gray-300", children: "Subject" }), _jsx(TableHead, { className: "text-gray-300", children: "Priority" }), _jsx(TableHead, { className: "text-gray-300", children: "Status" }), _jsx(TableHead, { className: "text-gray-300", children: "Actions" })] }) }), _jsx(TableBody, { children: safeTickets.length === 0 ? (_jsx(TableRow, { children: _jsx(TableCell, { colSpan: 5, className: "text-center text-gray-400 py-8", children: "No support tickets" }) })) : (safeTickets.map((ticket) => (_jsxs(TableRow, { className: "border-gray-700", children: [_jsxs(TableCell, { className: "text-white", children: ["#", ticket.ticket?.id] }), _jsx(TableCell, { className: "text-gray-300", children: ticket.ticket?.subject || 'N/A' }), _jsx(TableCell, { children: _jsx(Badge, { className: getStatusColor(ticket.ticket?.priority), children: ticket.ticket?.priority || 'medium' }) }), _jsx(TableCell, { children: _jsx(Badge, { className: getStatusColor(ticket.ticket?.status), children: ticket.ticket?.status || 'open' }) }), _jsx(TableCell, { children: _jsx(Button, { variant: "outline", size: "sm", children: "View Ticket" }) })] }, ticket.ticket?.id)))) })] })) })] }) })] }) })] }));
}
