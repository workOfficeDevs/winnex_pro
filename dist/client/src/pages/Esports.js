import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import Layout from '@/components/Layout';
import { Gamepad2, Trophy, Users, Clock, Star, TrendingUp, Zap, Calendar } from 'lucide-react';
import { apiRequest } from '@/lib/queryClient';
export default function Esports() {
    const [selectedGame, setSelectedGame] = useState('all');
    const [selectedTournament, setSelectedTournament] = useState('all');
    const { data: games, isLoading: gamesLoading } = useQuery({
        queryKey: ['/api/esports/games'],
    });
    const { data: matches, isLoading: matchesLoading } = useQuery({
        queryKey: ['/api/esports/matches', selectedGame, selectedTournament],
    });
    const { data: tournaments, isLoading: tournamentsLoading } = useQuery({
        queryKey: ['/api/esports/tournaments'],
    });
    const { data: liveStats } = useQuery({
        queryKey: ['/api/esports/live-stats'],
        refetchInterval: 5000,
    });
    const getStatusColor = (status) => {
        switch (status) {
            case 'live': return 'bg-red-500/20 text-red-400 border-red-500/20';
            case 'upcoming': return 'bg-blue-500/20 text-blue-400 border-blue-500/20';
            case 'finished': return 'bg-gray-500/20 text-gray-400 border-gray-500/20';
            default: return 'bg-gray-500/20 text-gray-400 border-gray-500/20';
        }
    };
    const getGameIcon = (game) => {
        const gameIcons = {
            'Counter-Strike 2': '🔫',
            'League of Legends': '⚔️',
            'Dota 2': '🛡️',
            'Valorant': '🎯',
            'Overwatch 2': '🚀',
            'Rocket League': '⚽',
            'Fortnite': '🏗️',
            'Call of Duty': '💥'
        };
        return gameIcons[game] || '🎮';
    };
    if (gamesLoading || matchesLoading || tournamentsLoading) {
        return (_jsx(Layout, { children: _jsx("div", { className: "min-h-screen flex items-center justify-center", children: _jsxs("div", { className: "text-center", children: [_jsx("div", { className: "animate-spin rounded-full h-32 w-32 border-b-2 border-green-500 mx-auto" }), _jsx("p", { className: "mt-4 text-slate-300", children: "Loading E-sports..." })] }) }) }));
    }
    return (_jsx(Layout, { children: _jsxs("div", { className: "container mx-auto px-4 py-8 space-y-8", children: [_jsxs("div", { className: "text-center", children: [_jsxs("div", { className: "flex items-center justify-center mb-4", children: [_jsx(Gamepad2, { className: "h-12 w-12 text-green-400 mr-4" }), _jsx("h1", { className: "text-4xl font-bold text-white", children: "E-sports Betting" })] }), _jsx("p", { className: "text-slate-300 text-lg", children: "Bet on the world's biggest gaming tournaments and competitions" })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-6", children: [_jsx(Card, { className: "bg-black/20 border-green-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-green-400 text-sm font-medium", children: "Live Matches" }), _jsx("p", { className: "text-3xl font-bold text-white", children: liveStats?.liveMatches || 24 })] }), _jsx(Zap, { className: "h-8 w-8 text-green-400" })] }) }) }), _jsx(Card, { className: "bg-black/20 border-blue-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-blue-400 text-sm font-medium", children: "Total Viewers" }), _jsx("p", { className: "text-3xl font-bold text-white", children: liveStats?.totalViewers?.toLocaleString() || '2.4M' })] }), _jsx(Users, { className: "h-8 w-8 text-blue-400" })] }) }) }), _jsx(Card, { className: "bg-black/20 border-purple-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-purple-400 text-sm font-medium", children: "Prize Pools" }), _jsxs("p", { className: "text-3xl font-bold text-white", children: ["$", liveStats?.totalPrize?.toLocaleString() || '15.2M'] })] }), _jsx(Trophy, { className: "h-8 w-8 text-purple-400" })] }) }) }), _jsx(Card, { className: "bg-black/20 border-yellow-500/20 backdrop-blur-xl", children: _jsx(CardContent, { className: "p-6", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("p", { className: "text-yellow-400 text-sm font-medium", children: "Active Tournaments" }), _jsx("p", { className: "text-3xl font-bold text-white", children: liveStats?.activeTournaments || 47 })] }), _jsx(Calendar, { className: "h-8 w-8 text-yellow-400" })] }) }) })] }), _jsxs("div", { children: [_jsx("h2", { className: "text-2xl font-bold text-white mb-6", children: "Popular Games" }), _jsx("div", { className: "grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4", children: games?.slice(0, 8).map((game) => (_jsx(Card, { className: `bg-black/20 border-white/10 backdrop-blur-xl cursor-pointer transition-all hover:border-green-500/50 ${selectedGame === game.id ? 'border-green-500/50 bg-green-500/10' : ''}`, onClick: () => setSelectedGame(game.id), children: _jsxs(CardContent, { className: "p-4 text-center", children: [_jsx("div", { className: "text-3xl mb-2", children: getGameIcon(game.name) }), _jsx("p", { className: "text-white font-medium text-sm", children: game.name }), _jsxs("p", { className: "text-slate-400 text-xs", children: [game.activeMatches, " matches"] })] }) }, game.id))) })] }), _jsxs(Tabs, { defaultValue: "matches", className: "space-y-6", children: [_jsxs(TabsList, { className: "bg-black/20 backdrop-blur-xl border-white/10", children: [_jsx(TabsTrigger, { value: "matches", className: "data-[state=active]:bg-green-500/20", children: "Live & Upcoming Matches" }), _jsx(TabsTrigger, { value: "tournaments", className: "data-[state=active]:bg-green-500/20", children: "Tournaments" }), _jsx(TabsTrigger, { value: "results", className: "data-[state=active]:bg-green-500/20", children: "Results & Stats" })] }), _jsxs(TabsContent, { value: "matches", className: "space-y-6", children: [_jsxs("div", { className: "flex flex-wrap gap-4", children: [_jsxs(Select, { value: selectedGame, onValueChange: setSelectedGame, children: [_jsx(SelectTrigger, { className: "w-48 bg-slate-800/50 border-slate-600", children: _jsx(SelectValue, { placeholder: "Select game" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "all", children: "All Games" }), _jsx(SelectItem, { value: "cs2", children: "Counter-Strike 2" }), _jsx(SelectItem, { value: "lol", children: "League of Legends" }), _jsx(SelectItem, { value: "dota2", children: "Dota 2" }), _jsx(SelectItem, { value: "valorant", children: "Valorant" })] })] }), _jsxs(Select, { value: selectedTournament, onValueChange: setSelectedTournament, children: [_jsx(SelectTrigger, { className: "w-48 bg-slate-800/50 border-slate-600", children: _jsx(SelectValue, { placeholder: "Select tournament" }) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "all", children: "All Tournaments" }), _jsx(SelectItem, { value: "worlds", children: "World Championship" }), _jsx(SelectItem, { value: "major", children: "Major Tournament" }), _jsx(SelectItem, { value: "regional", children: "Regional League" })] })] })] }), _jsx("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: matches?.map((match) => (_jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex justify-between items-center", children: [_jsxs("div", { children: [_jsx(CardTitle, { className: "text-white text-lg", children: match.tournament }), _jsx("p", { className: "text-slate-400 text-sm", children: match.game })] }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsxs(Badge, { className: getStatusColor(match.status), children: [match.status === 'live' && _jsx("div", { className: "w-2 h-2 bg-red-500 rounded-full animate-pulse mr-1" }), match.status] }), _jsxs("div", { className: "flex items-center text-slate-400 text-sm", children: [_jsx(Users, { className: "h-4 w-4 mr-1" }), match.viewers.toLocaleString()] })] })] }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "flex items-center justify-between p-4 bg-slate-800/30 rounded-lg", children: [_jsxs("div", { className: "text-center flex-1", children: [_jsx("p", { className: "text-white font-bold text-lg", children: match.team1 }), _jsx("p", { className: "text-green-400 font-bold text-xl", children: match.odds.team1 })] }), _jsxs("div", { className: "text-center px-4", children: [_jsx("p", { className: "text-slate-400 text-sm", children: "VS" }), _jsx(Clock, { className: "h-4 w-4 text-slate-400 mx-auto mt-1" })] }), _jsxs("div", { className: "text-center flex-1", children: [_jsx("p", { className: "text-white font-bold text-lg", children: match.team2 }), _jsx("p", { className: "text-green-400 font-bold text-xl", children: match.odds.team2 })] })] }), _jsxs("div", { className: "grid grid-cols-2 gap-4 text-sm", children: [_jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Start Time" }), _jsx("p", { className: "text-white", children: new Date(match.startTime).toLocaleString() })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Prize Pool" }), _jsxs("p", { className: "text-white", children: ["$", match.prize.toLocaleString()] })] })] }), match.maps && (_jsxs("div", { children: [_jsx("p", { className: "text-slate-400 text-sm mb-2", children: "Maps" }), _jsx("div", { className: "flex flex-wrap gap-1", children: match.maps.map((map, index) => (_jsx(Badge, { variant: "secondary", className: "text-xs", children: map }, index))) })] })), _jsxs("div", { className: "flex space-x-2", children: [_jsxs(Button, { className: "flex-1 bg-green-500 hover:bg-green-600", onClick: () => {
                                                                    const betAmount = 10;
                                                                    apiRequest('POST', '/api/bets', {
                                                                        matchId: match.id,
                                                                        selection: match.team1,
                                                                        odds: match.odds.team1,
                                                                        stake: betAmount
                                                                    }).then(() => {
                                                                        console.log(`Bet placed on ${match.team1}`);
                                                                    }).catch(err => {
                                                                        console.log('Bet placement error:', err);
                                                                    });
                                                                }, children: ["Bet on ", match.team1] }), _jsxs(Button, { className: "flex-1 bg-blue-500 hover:bg-blue-600", onClick: () => {
                                                                    const betAmount = 10;
                                                                    apiRequest('POST', '/api/bets', {
                                                                        matchId: match.id,
                                                                        selection: match.team2,
                                                                        odds: match.odds.team2,
                                                                        stake: betAmount
                                                                    }).then(() => {
                                                                        console.log(`Bet placed on ${match.team2}`);
                                                                    }).catch(err => {
                                                                        console.log('Bet placement error:', err);
                                                                    });
                                                                }, children: ["Bet on ", match.team2] })] })] })] }, match.id))) })] }), _jsx(TabsContent, { value: "tournaments", className: "space-y-6", children: _jsx("div", { className: "grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6", children: tournaments?.map((tournament) => (_jsxs(Card, { className: "bg-black/20 border-white/10 backdrop-blur-xl", children: [_jsx(CardHeader, { children: _jsxs("div", { className: "flex justify-between items-start", children: [_jsxs("div", { children: [_jsx(CardTitle, { className: "text-white", children: tournament.name }), _jsx("p", { className: "text-slate-400", children: tournament.game })] }), _jsx(Badge, { className: getStatusColor(tournament.status), children: tournament.status })] }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "grid grid-cols-2 gap-4 text-sm", children: [_jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Teams" }), _jsx("p", { className: "text-white font-bold", children: tournament.teams })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Matches" }), _jsx("p", { className: "text-white font-bold", children: tournament.matches })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Prize Pool" }), _jsxs("p", { className: "text-green-400 font-bold", children: ["$", tournament.prize.toLocaleString()] })] }), _jsxs("div", { children: [_jsx("p", { className: "text-slate-400", children: "Duration" }), _jsxs("p", { className: "text-white", children: [Math.ceil((new Date(tournament.endDate).getTime() - new Date(tournament.startDate).getTime()) / (1000 * 60 * 60 * 24)), " days"] })] })] }), _jsxs("div", { className: "text-sm", children: [_jsx("p", { className: "text-slate-400", children: "Tournament Period" }), _jsxs("p", { className: "text-white", children: [new Date(tournament.startDate).toLocaleDateString(), " - ", new Date(tournament.endDate).toLocaleDateString()] })] }), _jsxs(Button, { className: "w-full bg-purple-500 hover:bg-purple-600", children: [_jsx(Trophy, { className: "h-4 w-4 mr-2" }), "View Tournament"] })] })] }, tournament.id))) }) }), _jsx(TabsContent, { value: "results", className: "space-y-6", children: _jsxs("div", { className: "text-center py-12", children: [_jsx(TrendingUp, { className: "h-16 w-16 text-slate-400 mx-auto mb-4" }), _jsx("h3", { className: "text-xl font-bold text-white mb-2", children: "Recent Results & Statistics" }), _jsx("p", { className: "text-slate-400", children: "View completed matches and player statistics" }), _jsxs(Button, { className: "mt-4 bg-green-500 hover:bg-green-600", children: [_jsx(Star, { className: "h-4 w-4 mr-2" }), "View Results"] })] }) })] })] }) }));
}
